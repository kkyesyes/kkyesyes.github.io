<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法模板</title>
    <url>/2023/11/06/Algorithm-Templates/</url>
    <content><![CDATA[<p><a href="https://github.com/TheAlgorithms">Github 算法仓库</a></p>
<h2 id="个人整理"><a href="#个人整理" class="headerlink" title="个人整理"></a>个人整理</h2><h3 id="BFS算法框架-11-29-《labuladong的算法笔记》"><a href="#BFS算法框架-11-29-《labuladong的算法笔记》" class="headerlink" title="BFS算法框架 - 11.29 - 《labuladong的算法笔记》"></a>BFS算法框架 - 11.29 - 《labuladong的算法笔记》</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 计算从起点start到终点target的最近距离</span><br><span class="line">int BFS(Node start, Node target) &#123;</span><br><span class="line">	Queue&lt;Node&gt; q; // 核心数据结构</span><br><span class="line">	Set&lt;Node&gt; visited; // 避免走回头路</span><br><span class="line">	</span><br><span class="line">	q.offer(start); // 将起点加入队列</span><br><span class="line">	visited.add(start);</span><br><span class="line">	int step = 0; // 记录扩散的步数</span><br><span class="line">	</span><br><span class="line">	while (q not empty) &#123;</span><br><span class="line">		int sz = q.size();</span><br><span class="line">		/* 将当前队列中的所有节点向四周扩散 */</span><br><span class="line">		for (int i = 0; i &lt; sz; ++i) &#123;</span><br><span class="line">			Node cur = q.poll();</span><br><span class="line">			/* 划重点：这里判断是否到达终点 */</span><br><span class="line">			if (cur is target) return step;</span><br><span class="line">			/* 将cur的相邻节点加入队列 */</span><br><span class="line">			for (Node x : cur.adj()) &#123;</span><br><span class="line">				if (x not in visited) &#123;</span><br><span class="line">					q.offer();</span><br><span class="line">					visited.add(x);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		/* 划重点：更新步数在这里 */</span><br><span class="line">		step++;</span><br><span class="line">	&#125;</span><br><span class="line">	return step;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加法计算代码模板"><a href="#加法计算代码模板" class="headerlink" title="加法计算代码模板"></a>加法计算代码模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> sum % <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="双指针双对象代码模板"><a href="#双指针双对象代码模板" class="headerlink" title="双指针双对象代码模板"></a>双指针双对象代码模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="string">&quot;51198&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="string">&quot;967895&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num1.length() - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> num2.length() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> i &gt;= <span class="number">0</span> ? num1.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> j &gt;= <span class="number">0</span> ? num2.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">    i--;j--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串转十进制转换数代码模板"><a href="#字符串转十进制转换数代码模板" class="headerlink" title="字符串转十进制转换数代码模板"></a>字符串转十进制转换数代码模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; len &amp;&amp; Character.isDigit(num.charAt(index))) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> num.charAt(index) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    sum = sum * <span class="number">10</span> + ans;</span><br><span class="line">    index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序算法模板"><a href="#快速排序算法模板" class="headerlink" title="快速排序算法模板"></a>快速排序算法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序算法模板"><a href="#归并排序算法模板" class="headerlink" title="归并排序算法模板"></a>归并排序算法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt; q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整数二分算法模板"><a href="#整数二分算法模板" class="headerlink" title="整数二分算法模板"></a>整数二分算法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浮点数二分算法模板"><a href="#浮点数二分算法模板" class="headerlink" title="浮点数二分算法模板"></a>浮点数二分算法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// S[i] = a[1] + a[2] + ... a[i]</span></span><br><span class="line"><span class="comment">// a[l] + ... + a[r] = S[r] - S[l - 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// S[i, j] = 第i行j列格子左上部分所有元素的和</span></span><br><span class="line"><span class="comment">// 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为 S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B[i] = a[i] - a[i - 1]</span></span><br><span class="line"><span class="comment">// 给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c</span></span><br></pre></td></tr></table></figure>

<h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span></span><br><span class="line"><span class="comment">// S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法代码切片</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>切片</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Arsenal</title>
    <url>/2024/02/08/Arsenal/</url>
    <content><![CDATA[<h1 id="PERSONAL-ARSENAL"><a href="#PERSONAL-ARSENAL" class="headerlink" title="&#x2F;&#x2F;&#x2F; PERSONAL ARSENAL &#x2F;&#x2F;&#x2F;"></a>&#x2F;&#x2F;&#x2F; PERSONAL ARSENAL &#x2F;&#x2F;&#x2F;</h1><h2 id="Asserts"><a href="#Asserts" class="headerlink" title="Asserts:"></a>Asserts:</h2><h3 id="Internet-Security"><a href="#Internet-Security" class="headerlink" title="Internet-Security"></a>Internet-Security</h3><h4 id="Sniffer"><a href="#Sniffer" class="headerlink" title="Sniffer"></a>Sniffer</h4><ul>
<li><a href="./WPE%E4%B8%89%E4%BB%B6%E5%A5%97.zip">WPE三件套.zip</a></li>
</ul>
]]></content>
      <categories>
        <category>Arsenal</category>
      </categories>
      <tags>
        <tag>Arsenal</tag>
      </tags>
  </entry>
  <entry>
    <title>Github资源集</title>
    <url>/2023/11/13/Github-Resources/</url>
    <content><![CDATA[<ol>
<li><a href="https://github.com/ruanyf/weekly/tree/master">科技爱好者周刊跳转链接 –to-&gt; Github</a></li>
<li><a href="https://github.com/EbookFoundation/free-programming-books">编程资源跳转链接 –to-&gt; Github</a></li>
<li><a href="https://github.com/TheAlgorithms">算法模板大全 –to–&gt; Github</a></li>
<li><a href="https://github.com/krahets/hello-algo">Hello算法 –to–&gt; Github</a></li>
<li><a href="https://github.com/HeroHai/it-pdf-books">新版 1000 多本计算机电子书免费下载 –to–&gt; Github</a></li>
</ol>
]]></content>
      <categories>
        <category>资源归档</category>
      </categories>
      <tags>
        <tag>男男交友</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机体系结构/组成原理</title>
    <url>/2023/11/14/Computer-Architecture/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1ZJ411b7Na/?spm_id_from=333.999.0.0&vd_source=760264507c20c8ac38634e47af1aa1fa">微机原理 （西安电子科技大学）_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>计算机体系</tag>
        <tag>计算机组成原理</tag>
        <tag>微机原理</tag>
      </tags>
  </entry>
  <entry>
    <title>英语备考笔记</title>
    <url>/2024/02/14/CET4Translation/</url>
    <content><![CDATA[<h1 id="议论文模板"><a href="#议论文模板" class="headerlink" title="议论文模板"></a>议论文模板</h1><h2 id="开头段（总论点-30-50字）："><a href="#开头段（总论点-30-50字）：" class="headerlink" title="开头段（总论点 30~50字）："></a>开头段（总论点 30~50字）：</h2><ol>
<li><p>第一句：</p>
<ol>
<li><p>看题目要求是否要抄题</p>
</li>
<li><p>若不抄题 -&gt; With regard to … (n.&#x2F; how to …&#x2F; whether …&#x2F; the saying), viewpoints vary <u>considerably(相当地) &#x2F; substantially(充分地) &#x2F; vastly(深远地) &#x2F; enormously(大大地)</u>. （对于…，大家观点各不相同）</p>
<blockquote>
<p>注意 标点和 to的词性</p>
</blockquote>
</li>
</ol>
</li>
<li><p>第二句：</p>
<ul>
<li>As far as I am concerned, …</li>
<li>From my perspective, …</li>
<li>In my opinion, …</li>
<li>From my standpoint, …<ol>
<li>I <strong>am in line with</strong> (I think …) the argument &#x2F; view &#x2F; opinion that … + 完整主谓宾（同位语从句）</li>
<li>好：xxx is tremendously beneficial &#x3D; xxx exerts <strong>salutary impacts</strong>.（施加有益影响）</li>
<li>坏：xxx is harmful &#x2F; <strong>detrimental</strong>. &#x3D; xxx imposes <strong>adverse impacts</strong>.（强加负向影响）</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="主体段（分论点）："><a href="#主体段（分论点）：" class="headerlink" title="主体段（分论点）："></a>主体段（分论点）：</h2><ul>
<li>往年真题要求：make comments 【原因、利弊、解决方法】 OR cite examples OR use personal experiences</li>
</ul>
<ol>
<li><p>若<strong>讲原因</strong>：</p>
<ol>
<li><p>There are <strong>a myriad of</strong>(很多；大量) reasons.（固定搭配）</p>
</li>
<li><p>The <u><strong>prime &#x2F; major</strong></u> contributing factor is that … + 完整主谓宾</p>
<p>【<strong>递进</strong>】To <strong>elucidate</strong>(进一步解释一下) &#x2F; To explain it further, + 展开道理论证</p>
</li>
<li><p>The second <strong>noteworthy</strong>(值得注意的) reason is that … + 完整主谓宾</p>
</li>
</ol>
</li>
<li><p>若<strong>讲利弊</strong>：</p>
<ol>
<li>上文 factor &#x2F; reason 换成 benefit &#x2F; merit 或如下：<ol>
<li>The benefits of … are <strong>numerous</strong>(多) and <strong>manifold</strong>(多)（外刊原句）</li>
<li>First and <em>foremost</em>(第一), never can we ignore the significance of A (to B).【<strong>半倒装</strong>】（我们永远都不能忘记A（对B）的重要性）</li>
<li><strong>On top of</strong>(进一步) that, a further merit is that …</li>
</ol>
</li>
</ol>
</li>
<li><p>若<strong>讲问题</strong>：</p>
<ol>
<li>换成 problem &#x2F; challenge &#x2F; hazard –或者– There are hidden(潜在的) <strong>problems &#x2F; hazards</strong>.</li>
<li>【解决方法】To address &#x2F; combat the problem, <strong>it is <em>imperative(重要的) &#x2F; advisable(明智的) (for sb) to do</em></strong> 【形式主语】</li>
</ol>
</li>
<li><p>若<strong>讲方法</strong>：换成 <u>ways &#x2F; methods &#x2F; approaches</u> —- only via this approach + 【半倒装】(can sb …)</p>
</li>
<li><p>举例：</p>
<ol>
<li>xxx is <strong>a case in point</strong>.（固定搭配）</li>
<li><strong>This point is best illustrated by the case of …</strong> （外刊原句）</li>
</ol>
</li>
<li><p>凑字数小结【可有可无】：</p>
<p><strong>Accordingly</strong> &#x2F; Therefore &#x2F; Thus &#x2F; Hence &#x2F; So, …</p>
<ol>
<li>it <strong>reinforces</strong>(再次强调) my point that … 【同位语从句】</li>
<li>it is <u><strong>utterly</strong>(完全地) &#x2F; unmistakably(毫无疑问地) &#x2F; abundantly</u>(十分地) <strong>+</strong> (明显的是)<u>clear &#x2F; <strong>manifest</strong> &#x2F; obvious &#x2F; evident</u> that … + 完整主谓宾【形式主语】</li>
</ol>
</li>
</ol>
<h2 id="结尾段"><a href="#结尾段" class="headerlink" title="结尾段"></a>结尾段</h2><ol>
<li><p><strong>To sum up</strong>, &#x2F; all in all, &#x2F; <strong>In a nutshell</strong>, 【注意标点和语法】</p>
</li>
<li><p>（凑字数，可有可无）：</p>
<ol>
<li><p><strong>in light of</strong> the <strong>aforesaid &#x2F; aforementioned &#x2F;</strong> above factors, …</p>
</li>
<li><p>【挑一个写】</p>
<ol>
<li><p>from what has been discussed above, …</p>
</li>
<li><p>from all the analysis above, …</p>
</li>
<li><p><strong>taking into account</strong> all the factors above, …</p>
</li>
<li><p>considering all the factors above, …</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>重申&#x2F;得出：</p>
<ol>
<li>I <strong>reiterate</strong> my standpoint that … 【同位语从句】</li>
<li>it is <u>safe &#x2F; natural &#x2F; reasonable</u>（合理地&#x2F;自然地 + 得出结论） to reach the conclusion that … 【形式主语】</li>
</ol>
</li>
</ol>
<h1 id="翻译-阅读背景词汇"><a href="#翻译-阅读背景词汇" class="headerlink" title="翻译+阅读背景词汇"></a>翻译+阅读背景词汇</h1><h2 id="重点考察句型"><a href="#重点考察句型" class="headerlink" title="重点考察句型"></a>重点考察句型</h2><ol>
<li>[2019.6&#x2F;2020.7]“……已有……多年的历史” -&gt; <em>…has a history of more than…years.</em></li>
</ol>
<h2 id="常用句型"><a href="#常用句型" class="headerlink" title="常用句型"></a>常用句型</h2><ol>
<li>“吃火锅时” -&gt; <em>When (family members and friends are) having hot pot,</em>(When 引导的时间状语从句+句子主干+with伴随状语)</li>
<li>“……同时……” -&gt; <em>…can do A while doing B.</em></li>
</ol>
<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ol>
<li><p>地方：</p>
<p>1 | food culture -&gt; 饮食文化</p>
<p>2 | delicious cuisine -&gt; 佳肴</p>
<p>3 | rich cultural charm -&gt; 丰富的文化韵味</p>
</li>
<li><p>古代文明：ancient civilization</p>
</li>
<li><p>古代&#x2F;近代：ancient times  modern times 【必须复数】</p>
</li>
<li><p>随唐大运河：the Grand Canal(运河) of Sui Dynasty</p>
</li>
<li><p>康乾盛世：the High Qing era</p>
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215091438688.png" class title="image-20231215091438688">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215091540842.png" class title="image-20231215091540842">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215091908857.png" class title="image-20231215091908857">
</li>
<li><p>领士：territory</p>
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092245766.png" class title="image-20231215092245766">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092410377.png" class title="image-20231215092410377">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092630784.png" class title="image-20231215092630784">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092751521.png" class title="image-20231215092751521">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092925879.png" class title="image-20231215092925879">
</li>
<li><img src="/2024/02/14/CET4Translation/image-20231215092958422.png" class title="image-20231215092958422">
</li>
<li><p>中国经济：</p>
<img src="/2024/02/14/CET4Translation/image-20231215093140099.png" class title="image-20231215093140099">

<img src="/2024/02/14/CET4Translation/image-20231215093300729.png" class title="image-20231215093300729">

<img src="/2024/02/14/CET4Translation/image-20231215093354610.png" class title="image-20231215093354610">

<img src="/2024/02/14/CET4Translation/image-20231215182221785.png" class title="image-20231215182221785">

<img src="/2024/02/14/CET4Translation/image-20231215182303213.png" class title="image-20231215182303213">

<img src="/2024/02/14/CET4Translation/image-20231215182412935.png" class title="image-20231215182412935">

<img src="/2024/02/14/CET4Translation/image-20231215182520821.png" class title="image-20231215182520821">
</li>
<li><p>社会发展：</p>
<img src="/2024/02/14/CET4Translation/image-20231215204201389.png" class title="image-20231215204201389">

<img src="/2024/02/14/CET4Translation/image-20231215183041884.png" class title="image-20231215183041884">

<img src="/2024/02/14/CET4Translation/image-20231215183102396.png" class title="image-20231215183102396">

<img src="/2024/02/14/CET4Translation/image-20231215205202154.png" class title="image-20231215205202154">

<img src="/2024/02/14/CET4Translation/image-20231215210239574.png" class title="image-20231215210239574">

<img src="/2024/02/14/CET4Translation/image-20231215210354567.png" class title="image-20231215210354567">

<img src="/2024/02/14/CET4Translation/image-20231215210435419.png" class title="image-20231215210435419">

<img src="/2024/02/14/CET4Translation/image-20231215210450998.png" class title="image-20231215210450998">

<img src="/2024/02/14/CET4Translation/image-20231215210552788.png" class title="image-20231215210552788">
</li>
<li><p>经济和社会发展：</p>
<img src="/2024/02/14/CET4Translation/image-20231215211935208.png" class title="image-20231215211935208">

<img src="/2024/02/14/CET4Translation/image-20231215212020103.png" class title="image-20231215212020103">

<img src="/2024/02/14/CET4Translation/image-20231215212113308.png" class title="image-20231215212113308">

<img src="/2024/02/14/CET4Translation/image-20231215212315510.png" class title="image-20231215212315510">

<img src="/2024/02/14/CET4Translation/image-20231215212508534.png" class title="image-20231215212508534">

<img src="/2024/02/14/CET4Translation/image-20231215212652160.png" class title="image-20231215212652160">

<img src="/2024/02/14/CET4Translation/image-20231215213441101.png" class title="image-20231215213441101">

<img src="/2024/02/14/CET4Translation/image-20231215213655340.png" class title="image-20231215213655340">

<img src="/2024/02/14/CET4Translation/image-20231215213842556.png" class title="image-20231215213842556">

<img src="/2024/02/14/CET4Translation/image-20231215214139659.png" class title="image-20231215214139659">

<img src="/2024/02/14/CET4Translation/image-20231215214320809.png" class title="image-20231215214320809">

<img src="/2024/02/14/CET4Translation/image-20231215214600191.png" class title="image-20231215214600191"></li>
</ol>
]]></content>
      <categories>
        <category>英语考试</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
        <tag>CET4/6</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC 笔记</title>
    <url>/2024/01/27/JUC/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV1JT4y1S7K8">Java JUC 并发编程 已完结（IDEA 2021版本）4K蓝光画质 玩转多线程</a></p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p><a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/11/14/Internet/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&vd_source=760264507c20c8ac38634e47af1aa1fa">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 笔记</title>
    <url>/2024/01/22/JVM/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV1Er4y1r7as">Java JVM 虚拟机 已完结（IDEA 2021版本）4K蓝光画质 全程劝退 - by 青空の霞光</a></p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p><a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
<h2 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h2><ol>
<li><p>time is more than 10 years from present</p>
<img src="/2024/01/22/JVM/image-20240122205714797.png" class title="image-20240122205714797">

<blockquote>
<p>解决办法：</p>
<ol>
<li><p>（亲测无效）（<a href="https://yddmax.github.io/2017/06/12/openjdk%E4%B9%8B%E7%BC%96%E8%AF%91%E7%BB%8F%E5%B8%B8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/">博客地址</a>）：</p>
<p>修改 jdk&#x2F;src&#x2F;share&#x2F;classes&#x2F;java&#x2F;util&#x2F;CurrencyData.properties 文件</p>
<p>修改108行<br><code>AZ=AZM;2009-12-31-20-00-00;AZN</code><br>修改381行<br><code>MZ=MZM;2009-06-30-22-00-00;MZN</code><br>修改443行<br><code>RO=ROL;2009-06-30-21-00-00;RON</code><br>修改535行<br><code>TR=TRL;2009-12-31-22-00-00;TRY</code><br>修改561行<br><code>VE=VEB;2009-01-01-04-00-00;VEF</code></p>
</li>
<li><p>（亲测有效）（<a href="https://github.com/NixOS/nixpkgs/commit/9b81769950b6d0221643c7b0758d894f7742a62a">Github 地址</a>）</p>
<p>修改相关时间计算函数中的计算代码</p>
</li>
</ol>
</blockquote>
</li>
<li><p>还有几个 Not found 报错原因：只将更改前的（nashorn&#x2F;make&#x2F;BuildNashorn.gmk 文件中的）代码注释而未删掉</p>
</li>
</ol>
<h2 id="成功瞬间"><a href="#成功瞬间" class="headerlink" title="成功瞬间"></a>成功瞬间</h2><ol>
<li><p>JDK8 编译成功</p>
<img src="/2024/01/22/JVM/image-20240122235019452.png" class title="image-20240122235019452">

<p>截止 2024.1.23 00:00</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>虚拟机</tag>
        <tag>计算机科学与技术</tag>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 项目</title>
    <url>/2023/11/25/JavaProjects/</url>
    <content><![CDATA[<h1 id="1-坦克大战-停止维护"><a href="#1-坦克大战-停止维护" class="headerlink" title="1. 坦克大战 (停止维护)"></a>1. 坦克大战 (停止维护)</h1><ol>
<li>Repo:<ol>
<li><a href="https://github.com/kkyesyes/TanksBattle/tree/master">TanksBattle (Github)</a></li>
</ol>
</li>
</ol>
<h1 id="2-多用户通信系统-暂停维护"><a href="#2-多用户通信系统-暂停维护" class="headerlink" title="2. 多用户通信系统 (暂停维护)"></a>2. 多用户通信系统 (暂停维护)</h1><ol>
<li>Repos:<ol>
<li><a href="https://github.com/kkyesyes/Multi-userCommunicationSystem-Client">Client (Github)</a></li>
<li><a href="https://github.com/kkyesyes/Multi-userCommunicationSystem-Server">Server (Github)</a></li>
</ol>
</li>
</ol>
<h1 id="3-从-0-实现-Tomcat-暂停维护"><a href="#3-从-0-实现-Tomcat-暂停维护" class="headerlink" title="3. 从 0 实现 Tomcat (暂停维护)"></a>3. 从 0 实现 Tomcat (暂停维护)</h1><ol>
<li><p>Repo:</p>
<ol>
<li><a href="https://github.com/kkyesyes/KKTomcat">KKTomcat (Github)</a></li>
</ol>
</li>
<li><p>Notes:</p>
<ol>
<li><p>已完结</p>
<p>（详情见 JavaWeb 相关部分）</p>
</li>
</ol>
</li>
</ol>
<h1 id="4-家居网购-暂停维护"><a href="#4-家居网购-暂停维护" class="headerlink" title="4. 家居网购 (暂停维护)"></a>4. 家居网购 (暂停维护)</h1><ol>
<li><p>Assets:</p>
<ol>
<li><a href="./Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8(%E5%8F%82%E8%80%83).zip">Java正则表达式大全(参考).zip</a></li>
</ol>
</li>
<li><p>Repo:</p>
<ol>
<li><a href="https://github.com/kkyesyes/JavaWebQuiz">JavaWebQuiz (Github)</a></li>
</ol>
</li>
<li><p>Notes:</p>
</li>
</ol>
<h2 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h2><ul>
<li>原生 Servlet &#x2F; 过滤器，WEB-Service-DAO-Entity</li>
</ul>
<h2 id="软件项目开发流程"><a href="#软件项目开发流程" class="headerlink" title="软件项目开发流程"></a>软件项目开发流程</h2><ol>
<li><p>需求分析阶段</p>
<img src="/2023/11/25/JavaProjects/image-20240121223938450.png" class title="image-20240121223938450">
</li>
<li><p>设计阶段</p>
</li>
</ol>
   <img src="/2023/11/25/JavaProjects/image-20240121230950375.png" class title="image-20240121230950375">

<ol start="3">
<li>开发阶段</li>
</ol>
   <img src="/2023/11/25/JavaProjects/image-20240121234717667.png" class title="image-20240121234717667">

<ol start="4">
<li>测试阶段</li>
</ol>
   <img src="/2023/11/25/JavaProjects/image-20240122000514208.png" class title="image-20240122000514208">

<ol start="5">
<li>实施阶段</li>
</ol>
   <img src="/2023/11/25/JavaProjects/image-20240130114325601.png" class title="image-20240130114325601">

<ol start="6">
<li>维护阶段</li>
</ol>
   <img src="/2023/11/25/JavaProjects/image-20240130115114442.png" class title="image-20240130115114442">

<ol start="7">
<li><p>项目设计</p>
<ol>
<li><p>后端三层架构</p>
<img src="/2023/11/25/JavaProjects/image-20240130123453792.png" class title="image-20240130123453792">
</li>
<li><p>项目分包方案</p>
<img src="/2023/11/25/JavaProjects/image-20240130123549862.png" class title="image-20240130123549862">
</li>
<li><p>MVC</p>
<img src="/2023/11/25/JavaProjects/image-20240130124455113.png" class title="image-20240130124455113">

<ol>
<li>MVC 全称：Model、View、Controller</li>
<li>最早出现在 JavaEE 三层中的 Web 层，可有效指导 Web 层的代码分离，单独工作（解耦）</li>
<li>View 视图：负责数据和界面显示，不接受任何与数据无关的代码</li>
<li>Controller 控制器：负责接收请求，调用业务层的代码处理请求，然后派发页面（调度者）</li>
<li>Model 模型：将与业务逻辑相关的数据封装为具体的 JavaBean 类，其中不掺杂与数据处理相关的代码</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="代码归档（Version-of-Git’s-message）"><a href="#代码归档（Version-of-Git’s-message）" class="headerlink" title="代码归档（Version of Git’s message）"></a>代码归档（Version of Git’s message）</h2><ol>
<li><p>开发环境搭建（1.x）</p>
</li>
<li><p>会员注册前端校验与后端表设计（2.x）</p>
</li>
<li><p>会员注册后端服务（3.x）</p>
</li>
<li><p>会员登录（4.x）</p>
</li>
<li><p>登录错误提示，表单回显用户名（5.x）</p>
</li>
<li><p>Servlet 瘦身优化（6.x）</p>
</li>
<li><p>后台管理 - 家居显示（7.x）</p>
</li>
<li><p>后台管理 - 家居添加（8.x）</p>
<ol>
<li>中文乱码问题解决：要在 BasicServlet（父类）中设置 req 编码</li>
<li>表单重复提交问题解决：设置重定向（重定向本质为两次请求）</li>
<li>后端数据校验：捕获异常并返回信息</li>
</ol>
</li>
<li><p>后台管理 - 家居删除（9.x）</p>
</li>
<li><p>后台管理 - 家居修改（10.x）</p>
</li>
<li><p>后台分页 - 家居分页显示（11.x）</p>
<ol>
<li>数据模型：高频变化的数据封装为 Bean（如导航条数据）</li>
</ol>
</li>
<li><p>首页分页（12.x）</p>
</li>
<li><p>首页搜索（13.x）</p>
</li>
<li><p>会员显示登录名（14.x）</p>
</li>
<li><p>注销登录（15.x）</p>
</li>
<li><p>注册验证码（16.x）</p>
</li>
<li><p>添加家居到购物车（17.x）</p>
</li>
<li><p>购物车的显示、修改、清空等界面前后端交互（18.x）</p>
</li>
<li><p>添加购物车操作库存校验（19.x）</p>
</li>
<li><p>过滤器权限验证（20.x）</p>
</li>
<li><p>事务管理（21.x）</p>
<ol>
<li>ThreadLocal 统一管理数据库连接</li>
</ol>
</li>
<li><p>统一错误页面（22.x）</p>
</li>
<li><p>AJAX 重构（23.x）</p>
</li>
<li><p>家居图片更新功能（24.x）</p>
</li>
<li><p>项目完结</p>
</li>
</ol>
<h1 id="5-黑马点评（Redis-笔记）"><a href="#5-黑马点评（Redis-笔记）" class="headerlink" title="5. 黑马点评（Redis 笔记）"></a>5. 黑马点评（Redis 笔记）</h1><h2 id="短信登录（Session-to-Redis）"><a href="#短信登录（Session-to-Redis）" class="headerlink" title="短信登录（Session to Redis）"></a>短信登录（Session to Redis）</h2><ol>
<li>Session 不方便进行多台 Tomcat 横向部署</li>
<li>拦截器内取 token 不能使排除页面获取 token</li>
</ol>
<h2 id="缓存（Cache）"><a href="#缓存（Cache）" class="headerlink" title="缓存（Cache）"></a>缓存（Cache）</h2><ol>
<li><p>缓存更新</p>
<ol>
<li><p>更新策略</p>
<ol>
<li>内存回收，自动更新（<strong>低一致</strong> 性需求）</li>
<li>设置超时，定时更新（<strong>低一致性</strong> 需求）</li>
<li>编码，主动更新（<strong>高一致性</strong> 需求）</li>
</ol>
</li>
<li><p>缓存一致性问题</p>
<ol>
<li>先删缓存，再更新数据库</li>
<li>先更新数据库，再写缓存（✅缓存更新速度快，相对影响小）</li>
</ol>
</li>
</ol>
</li>
<li><p>缓存穿透</p>
<p>指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库</p>
<ol>
<li><p>缓存空对象</p>
<ol>
<li><p>优：实现简单，维护方便</p>
</li>
<li><p>缺：</p>
<ol>
<li>额外内存消耗</li>
<li>可能造成短期数据不一致</li>
</ol>
</li>
</ol>
</li>
<li><p>布隆过滤（用数据索引布尔值来做存在判断）</p>
<ol>
<li>优：内存占用少，无多余 key</li>
<li>缺：<ol>
<li>实现复杂</li>
<li>存在误判可能</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>缓存雪崩</p>
<p>指同一时段大量缓存 key 同时失效或 Redis 服务宕机，导致大量请求到达数据库，带来巨大压力</p>
<ol>
<li>给不同的 key 的 TTL 添加随机值</li>
<li>利用 Redis 集群提高服务可用性</li>
<li>给缓存业务添加降级限流策略（如提前返回、拒绝服务）</li>
<li>给业务添加多级缓存（如 Nginx 缓存、JVM 本地缓存）</li>
</ol>
</li>
<li><p>缓存击穿</p>
<ol>
<li><p>互斥锁</p>
<img src="/2023/11/25/JavaProjects/image-20240225143659833.png" class title="image-20240225143659833">

<ol>
<li>优：<ol>
<li>无额外内存消耗</li>
<li>保证一致性</li>
<li>实现简单</li>
</ol>
</li>
<li>缺：<ol>
<li>线程需要等待，性能受影响</li>
<li>可能有死锁风险</li>
</ol>
</li>
</ol>
</li>
<li><p>逻辑过期</p>
<img src="/2023/11/25/JavaProjects/image-20240225143724075.png" class title="image-20240225143724075">

<ol>
<li>优：<ol>
<li>线程无需等待，性能较好</li>
</ol>
</li>
<li>缺：<ol>
<li>不保证一致性</li>
<li>有额外内存消耗</li>
<li>实现复杂</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>缓存工具封装</p>
</li>
</ol>
<h2 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h2><ol>
<li><p>全局唯一 ID</p>
<img src="/2023/11/25/JavaProjects/image-20240226105739989.png" class title="image-20240226105739989">
</li>
<li><p>实现优惠券秒杀下单</p>
</li>
<li><p>超卖问题</p>
</li>
</ol>
<h1 id="6-扎堆网（PileUp）-（伙伴匹配系统）"><a href="#6-扎堆网（PileUp）-（伙伴匹配系统）" class="headerlink" title="6. 扎堆网（PileUp） - （伙伴匹配系统）"></a>6. 扎堆网（PileUp） - （伙伴匹配系统）</h1><ol>
<li>Repos:<ol>
<li><a href="https://github.com/kkyesyes/PileUp-Frontend">PileUp-Frontend (Github)</a></li>
</ol>
</li>
<li>Notes:</li>
</ol>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>用户添加标签，标签分类</li>
<li>搜索、标签搜索<ol>
<li>Redis 缓存</li>
</ol>
</li>
<li>组队</li>
<li>允许用户修改标签</li>
<li>推荐<ol>
<li>相似度计算算法 + 本地分布式计算</li>
</ol>
</li>
</ol>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol>
<li>Vue3（提高页面开发效率）</li>
<li>Vant UI （基于 Vue 的移动端组件库）（React 版 Zent）</li>
<li>Vite（打包工具）</li>
<li>Nginx 单机部署</li>
</ol>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol>
<li>Java + SpringBoot</li>
<li>SpringMVC + MyBatis + MyBatis Plus</li>
<li>MySQL 数据库</li>
<li>Redis 缓存</li>
<li>Swagger + Knife4j 接口文档</li>
</ol>
<h2 id="代码归档"><a href="#代码归档" class="headerlink" title="代码归档"></a>代码归档</h2><ol>
<li><p>前端项目初始化（1.x）</p>
</li>
<li><p>前端主页 + 组件概览（2.x）</p>
<ol>
<li>设计<ol>
<li>tabbar<ol>
<li>首页（推荐 + 广告）<ol>
<li>推荐信息流（含广告）</li>
</ol>
</li>
<li>发现页（搜索&#x2F;热搜）</li>
<li>消息（邮件）</li>
<li>用户页（我）</li>
</ol>
</li>
</ol>
</li>
<li>开发</li>
</ol>
</li>
<li><p>数据库表设计</p>
<ol>
<li><p>标签表</p>
<ol>
<li>性别：男、女</li>
<li>方向：Java、C++、Go、前端、网安</li>
<li>正在学：Spring</li>
<li>目标：考研、春招</li>
<li>段位：初级、中级、高级、王者</li>
<li>身份：大一、大二、大三、大四、学生、待业、已就业、研一、研二、研三</li>
<li>状态：乐观、有点丧、单身、已婚、有对象</li>
<li><strong>用户自定义标签</strong></li>
<li>字段<ol>
<li>id int 主键</li>
<li>标签名 varchar 非空（必须唯一，唯一索引）</li>
<li>上传标签的用户 userId int（根据 userId 查已上传标签，普通索引）</li>
<li>父标签 id parentId int（分类）</li>
<li>是否为父标签 isParent tinyint （0 -&gt; 不是父标签 &#x2F; 1 -&gt; 是父标签）</li>
<li>创建时间 createTime datetime</li>
<li>更新时间 updateTime datetime</li>
<li>是否删除 isDelete tinyint （0&#x2F;1）</li>
</ol>
</li>
</ol>
</li>
<li><p>修改用户表（<strong>根据需求</strong>）</p>
<ol>
<li><p>补充 tags 字段，存 json 字符串 :white_check_mark:</p>
<ol>
<li><p>优：查询方便、不用新建关联表，标签是 <strong>用户的固有属性</strong> （除该系统之外还可能用到）</p>
<blockquote>
<p>性能低可用 Redis</p>
</blockquote>
</li>
<li><p>缺：用户表多一列</p>
</li>
</ol>
</li>
<li><p>加一个关联表，记录用户和标签的关系</p>
<ol>
<li><p>优：（应用场景：）查询灵活、可正查反查</p>
</li>
<li><p>缺：要多建一个表、多维护一个表</p>
<blockquote>
<p>企业大项目开发中尽量减少关联查询，很影响扩展性，而且影响查询性能</p>
</blockquote>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>根据标签搜索用户 - 后端（3.x）</p>
</li>
<li><p>根据标签搜索用户 - 前端（）</p>
</li>
</ol>
<h1 id="x-硅谷课程（SpringBoot-后）"><a href="#x-硅谷课程（SpringBoot-后）" class="headerlink" title="x. 硅谷课程（SpringBoot 后）"></a>x. 硅谷课程（SpringBoot 后）</h1><p>含公众号开发、文件上传、点播、直播…</p>
<h1 id="x-智能-BI（React-SpringBoot-MQ-AIGC）"><a href="#x-智能-BI（React-SpringBoot-MQ-AIGC）" class="headerlink" title="x. 智能 BI（React + SpringBoot + MQ + AIGC）"></a>x. 智能 BI（React + SpringBoot + MQ + AIGC）</h1><h1 id="x-尚医通（微服务一血）"><a href="#x-尚医通（微服务一血）" class="headerlink" title="x. 尚医通（微服务一血）"></a>x. 尚医通（微服务一血）</h1>]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>Java项目</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 笔记【完结】</title>
    <url>/2023/12/21/JavaWeb/</url>
    <content><![CDATA[<h1 id="资源归档"><a href="#资源归档" class="headerlink" title="资源归档"></a>资源归档</h1><ul>
<li><a href="./JAVA_EE_api_%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E7%89%88.chm">JAVA_EE_api_中英文对照版.chm</a></li>
</ul>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="配置开发"><a href="#配置开发" class="headerlink" title="配置开发"></a>配置开发</h2><img src="/2023/12/21/JavaWeb/image-20231223232226072.png" class title="image-20231223232226072">

<img src="/2023/12/21/JavaWeb/image-20231223232306106.png" class title="image-20231223232306106">



<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><img src="/2023/12/21/JavaWeb/image-20231223232843563.png" class title="image-20231223232843563">

<p>与 <strong>配置开发</strong> 的区别在于读取注解，后对所注解的类进行反射（而非用给定的类的全路径）</p>
<blockquote>
<p>Ctrl + Alt + 方向键 -&gt; <em>切换历史标签页</em></p>
</blockquote>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><img src="/2023/12/21/JavaWeb/image-20231224100149838.png" class title="image-20231224100149838">

<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><img src="/2023/12/21/JavaWeb/image-20231224101646524.png" class title="image-20231224101646524">

<h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><img src="/2023/12/21/JavaWeb/image-20231224101733001.png" class title="image-20231224101733001">

<h2 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h2><img src="/2023/12/21/JavaWeb/image-20231224101815734.png" class title="image-20231224101815734">

<h2 id="HTTP请求包分析"><a href="#HTTP请求包分析" class="headerlink" title="HTTP请求包分析"></a>HTTP请求包分析</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><h2 id="HTTP响应包分析"><a href="#HTTP响应包分析" class="headerlink" title="HTTP响应包分析"></a>HTTP响应包分析</h2><img src="/2023/12/21/JavaWeb/image-20231225005246431.png" class title="image-20231225005246431">

<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ul>
<li><a href="./HTTP_common_reqHeader_resHeader.zip">HTTP常见请求和响应头-说明.pdf（ZIP压缩包）</a></li>
</ul>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码（HTTP Status Code）的信息头（Server Header）用以响应浏览器的请求</p>
<h3 id="常见HTTP状态码"><a href="#常见HTTP状态码" class="headerlink" title="常见HTTP状态码"></a>常见HTTP状态码</h3><ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 请求的资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<h3 id="状态码补充"><a href="#状态码补充" class="headerlink" title="状态码补充"></a>状态码补充</h3><ul>
<li>302 - 临时移动（类似301），但资源只是临时被移动。客户端应继续使用原有URL</li>
<li>304 - 未修改，取缓存页面</li>
</ul>
<h3 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h3><ul>
<li><a href="./HTTP_resStatusCode.zip">HTTP响应状态码说明.docx（ZIP压缩包）</a></li>
</ul>
<h2 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>MIME (Multipurpose Internet Mail Extensions 多功能 Internet 邮件扩充服务) 是 HTTP 协议中数据类型（但不一定只能在浏览器中使用）。</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li>大类型 &#x2F; 小类型 （并与某一种文件的扩展名相对应）e.g. text&#x2F;html</li>
</ul>
<h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><img src="/2023/12/21/JavaWeb/image-20231225111939228.png" class title="image-20231225111939228">

<h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><p>通过 getServletConfig() 来获得配置详情</p>
<h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><img src="/2023/12/21/JavaWeb/image-20231225152249922.png" class title="image-20231225152249922">

<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol>
<li><p>ServletContext 是一个接口，它表示 Servlet 上下文对象</p>
</li>
<li><p>一个 web 工程，只有一个 ServletContext 对象实例</p>
</li>
<li><p>ServletContext 对象 是在 web 工程启动的时候创建的，在 web 工程停止的时候销毁</p>
</li>
<li><p>ServletContext 对象可以通过 ServletConfig.getServletContext() 方法获得对 ServletContext 对象的引用，也可以通过 this.getServletContext() 来获得其对象的引用</p>
</li>
<li><p>由于一个 web 应用中的所有 Servlet 共享同一个 ServletContext 对象，因此 Servlet 对象之间可以通过 ServletContext 对象来实现多个 Servlet 间通讯。ServletContext 对象通常也被称之为 域对象</p>
<img src="/2023/12/21/JavaWeb/image-20231225154055956.png" class title="image-20231225154055956"></li>
</ol>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>获取 web.xml 中配置的上下文参数 context-param [信息和整个 web 应用相关，而不是属于某个 Servlet]</li>
<li>获取当前的工程路径，格式：&#x2F; 工程路径</li>
<li>获取工程<strong>部署后</strong>在服务器硬盘上的<strong>绝对路径</strong></li>
<li>像 <strong>Map</strong> 一样存取数据，多个 Servlet 共享数据</li>
</ol>
<h1 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>HttpServletRequest 对象代表客户端的请求</li>
<li>当 客户端 &#x2F; 浏览器 通过 HTTP 协议访问服务器时，HTTP 请求头中的所有信息都封装在这个对象中</li>
<li>通过这个对象的方法，可以获得客户这些信息</li>
</ol>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol>
<li>getRequestURI() -&gt; <em>获取请求的资源路径</em></li>
<li>getRequestURL() -&gt; <em>获取请求的统一资源定位符（绝对路径）</em></li>
<li>getRemoteHost() -&gt; <em>获取客户端的主机</em></li>
<li>getHeader() -&gt; <em>获取请求头</em></li>
<li>getParameter() -&gt; <em>获取请求的参数</em></li>
<li>getParameterValues() -&gt; <em>获取请求的参数（多个值的时候使用），如checkbox</em></li>
<li>getMethod() -&gt; <em>获取请求的方式 GET 或 POST</em></li>
<li>setAttribute(key, value) -&gt; <em>设置域数据</em></li>
<li>getAttribute(key) -&gt; <em>获取域数据</em></li>
<li>getRequestDispatcher() -&gt; <em>获取请求转发对象</em></li>
</ol>
<h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>实现请求转发：请求转发是指一个 web 资源收到客户端请求后，通知服务器去调用另一个 web 资源进行处理</li>
<li>HttpServletRequest 对象（也叫 Request 对象）提供了一个 getRequestDispatcher 方法，该方法返回一个 RequestDispatcher 对象，调用这个对象的 forward 方法可以实现 请求转发</li>
<li>request 对象 同时也是一个域对象，开发人员通过 request 对象在实现转发时，把数据通过 request 对象带给其它 web 资源处理<ul>
<li>setAttribute()</li>
<li>getAttribute()</li>
<li>removeAttribute()</li>
<li>getAttributeNames()</li>
</ul>
</li>
</ol>
<h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><img src="/2023/12/21/JavaWeb/image-20231228233617020.png" class title="image-20231228233617020">

<img src="/2023/12/21/JavaWeb/image-20231229001125198.png" class title="image-20231229001125198">

<h3 id="转发代码"><a href="#转发代码" class="headerlink" title="转发代码"></a>转发代码</h3><img src="/2023/12/21/JavaWeb/image-20231229000152839.png" class title="image-20231229000152839">

<h3 id="注意事项-细节"><a href="#注意事项-细节" class="headerlink" title="注意事项 &amp; 细节"></a>注意事项 &amp; 细节</h3><ol>
<li>浏览器地址不会变化（转发过程没有与浏览器交互）</li>
<li>在同一次 HTTP 请求中，进行多次转发，仍然是一次 HTTP 请求</li>
<li>在同一次 HTTP 请求中，进行多次转发，多个 Servlet 可以共享 request域 &#x2F; 对象 的数据（因为始终是同一个对象）</li>
<li>可以转发到 WEB-INF 目录下</li>
<li>不能访问当前 web 工程外的资源</li>
<li>因为浏览器地址栏会停止在第一个 Servlet ，如果刷新页面，会再次发出请求（并且会带数据），所以在支付页面情况下，不能使用请求转发，否则会造成重复支付</li>
</ol>
<h1 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li><p>每次 HTTP 请求，Tomcat 会创建一个 HttpServletResponse 对象传递给 Servlet 程序去使用</p>
</li>
<li><p>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，如果需要设置返回给客户端的信息，通过 HttpServletResponse 对象来进行设置即可</p>
<img src="/2023/12/21/JavaWeb/image-20231229003708391.png" class title="image-20231229003708391"></li>
</ol>
<h2 id="向客户端返回数据-注意事项-细节"><a href="#向客户端返回数据-注意事项-细节" class="headerlink" title="向客户端返回数据 注意事项 &amp; 细节"></a>向客户端返回数据 注意事项 &amp; 细节</h2><ol>
<li><p>处理中文乱码问题（方案一）</p>
<img src="/2023/12/21/JavaWeb/image-20231229004800885.png" class title="image-20231229004800885">
</li>
<li><p>处理中文乱码问题（方案二）</p>
<img src="/2023/12/21/JavaWeb/image-20231229004818833.png" class title="image-20231229004818833"></li>
</ol>
<h1 id="Maven-简单引入"><a href="#Maven-简单引入" class="headerlink" title="Maven 简单引入"></a>Maven 简单引入</h1><h2 id="传统-Java-项目"><a href="#传统-Java-项目" class="headerlink" title="传统 Java 项目"></a>传统 Java 项目</h2><img src="/2023/12/21/JavaWeb/image-20231230161230672.png" class title="image-20231230161230672">

<h2 id="Maven-的-Java-项目"><a href="#Maven-的-Java-项目" class="headerlink" title="Maven 的 Java 项目"></a>Maven 的 Java 项目</h2><img src="/2023/12/21/JavaWeb/image-20231230161329530.png" class title="image-20231230161329530">

<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><img src="/2023/12/21/JavaWeb/image-20231230163836243.png" class title="image-20231230163836243">

<h1 id="JUL-日志框架"><a href="#JUL-日志框架" class="headerlink" title="JUL 日志框架"></a>JUL 日志框架</h1><h1 id="MyBatis-简单引入"><a href="#MyBatis-简单引入" class="headerlink" title="MyBatis 简单引入"></a>MyBatis 简单引入</h1><p>笔记引用：<a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
<h1 id="Tomcat手动实现"><a href="#Tomcat手动实现" class="headerlink" title="Tomcat手动实现"></a>Tomcat手动实现</h1><p>Repo:	<a href="https://github.com/kkyesyes/KKTomcat">KKTomcat (Github)</a></p>
<img src="/2023/12/21/JavaWeb/image-20231231195004662.png" class title="image-20231231195004662">

<h2 id="原理图解-BIO-多线程模型"><a href="#原理图解-BIO-多线程模型" class="headerlink" title="原理图解 (BIO 多线程模型)"></a>原理图解 (BIO 多线程模型)</h2><img src="/2023/12/21/JavaWeb/image-20240101192059636.png" class title="image-20240101192059636">

<h1 id="Web-工程路径专题"><a href="#Web-工程路径专题" class="headerlink" title="Web 工程路径专题"></a>Web 工程路径专题</h1><h2 id="表单跳转网址过长-解决方案"><a href="#表单跳转网址过长-解决方案" class="headerlink" title="表单跳转网址过长 解决方案"></a>表单跳转网址过长 解决方案</h2><h3 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a>相对路径：</h3><ol>
<li>相对路径下一个非常重要的规则：<strong>页面所有的相对路径（默认）都会参考当前浏览器地址栏路径来跳转</strong></li>
</ol>
<h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><ol>
<li>base 标签是 HTML 语言中的基准网址标记，它是一个单标签，位于网页头部的 head 标签内</li>
<li>一个页面最多只能使用一个 base 元素，用来提供一个指定的默认目标，是一种表达路径和连接网址的标记</li>
<li>常见的 url 路径形式分别有 相对路径 与 绝对路径，如果 base 标签指定了目标，浏览器将通过这个目标解析当前文档中的所有相对路径，包括（a、img、link、form）</li>
<li>浏览器解析时会在路径前加上 base 给的目标，而页面中的相对路径也都转换成了绝对路径。使用了 base 标签就应带上 href 属性和 target 属性</li>
</ol>
<blockquote>
<img src="/2023/12/21/JavaWeb/image-20240104153414454.png" class title="image-20240104153414454">
</blockquote>
<h1 id="Web-开发会话技术（Cookie-Session）"><a href="#Web-开发会话技术（Cookie-Session）" class="headerlink" title="Web 开发会话技术（Cookie &amp; Session）"></a>Web 开发会话技术（Cookie &amp; Session）</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li><p>什么是会话</p>
<p>会话 可简单理解为 <strong>用户开一个浏览器，点击多个超链接，访问服务器多个 web 资源，然后关闭浏览器</strong> 这样一整个过程</p>
</li>
<li><p>会话要解决的问题</p>
<p>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，服务器要想办法为每个用户保存这些数据</p>
</li>
</ol>
<h3 id="两种技术"><a href="#两种技术" class="headerlink" title="两种技术"></a>两种技术</h3><ol>
<li>Session</li>
<li>Cookie</li>
</ol>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><img src="/2023/12/21/JavaWeb/image-20240104200742930.png" class title="image-20240104200742930">

<h3 id="二说-Cookie"><a href="#二说-Cookie" class="headerlink" title="二说 Cookie"></a>二说 Cookie</h3><ol>
<li>Cookie 是服务器在客户端保存的用户的信息，如登录名，浏览历史 等就可以以 Cookie 方式保存</li>
<li>Cookie 信息就像是曲奇，数据量并不大，服务端需要的时候可以从客户端读取</li>
<li>保存在浏览器中</li>
</ol>
<h3 id="Cookie-应用"><a href="#Cookie-应用" class="headerlink" title="Cookie 应用"></a>Cookie 应用</h3><ol>
<li>保存登录时间</li>
<li>保存登录信息，一定时间内不用重复登录</li>
<li>网站个性化，定制内容</li>
</ol>
<h3 id="Cookie-常用方法"><a href="#Cookie-常用方法" class="headerlink" title="Cookie 常用方法"></a>Cookie 常用方法</h3><p><a href="./JAVA_EE_api_%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E7%89%88.chm">JAVA_EE_api_中英文对照版.chm</a></p>
<ol>
<li><p>Cookie 像一张表 (K-V)，一个是名字，一个是值，数据类型都是 String</p>
</li>
<li><p>如何创建一个 Cookie （在服务端创建）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(String name, String val);</span><br><span class="line">c.setMaxAge(); <span class="comment">// 保存时间</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如何将一个 Cookie 添加到客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.addCookie(c);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何读取一个 Cookie （在服务端读取）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getCookies();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="底层（Cookie-创建-读取）"><a href="#底层（Cookie-创建-读取）" class="headerlink" title="底层（Cookie 创建 &amp; 读取）"></a>底层（Cookie 创建 &amp; 读取）</h3><p>注：</p>
<ol>
<li>服务端创建与客户端同名 Cookie 相当于覆盖原 Cookie</li>
</ol>
<h3 id="JSESSIONID"><a href="#JSESSIONID" class="headerlink" title="JSESSIONID"></a>JSESSIONID</h3><ul>
<li>作为在同一服务器上区分不同会话的唯一标识</li>
</ul>
<h3 id="Cookie-生命周期"><a href="#Cookie-生命周期" class="headerlink" title="Cookie 生命周期"></a>Cookie 生命周期</h3><ol>
<li>Cookie 生命周期指的是如何管理 Cookie 什么时候销毁（删除、不再携带）</li>
<li>setMaxAge(int expiry)：（以秒为单位）<ol>
<li>正数：表示在指定的秒数后过期</li>
<li>负数：表示浏览器关闭，Cookie 就会被删除（默认值为 -1）</li>
<li>0，表示马上删除 Cookie</li>
</ol>
</li>
</ol>
<h3 id="Cookie-有效路径"><a href="#Cookie-有效路径" class="headerlink" title="Cookie 有效路径"></a>Cookie 有效路径</h3><ol>
<li>Cookie 的 path 属性可以有效过滤哪些 Cookie 可以发送给服务器，哪些不发，path 属性是通过 <strong>请求的地址</strong> 来进行有效过滤的（长路径包含短路径则有效）</li>
<li>默认为 <strong>上下文工程路径</strong></li>
</ol>
<h3 id="注意事项-细节-1"><a href="#注意事项-细节-1" class="headerlink" title="注意事项 &amp; 细节"></a>注意事项 &amp; 细节</h3><ol>
<li>一个 Cookie 只能标识一种信息，它至少含有一个标识该信息的名称（name）和设置值（value）</li>
<li>一个 web 站点可以给一个浏览器发送多个 Cookie，一个浏览器也可以存储多个 web 站点提供的 Cookie</li>
<li>Cookie 的总数量没有限制，但是每个域名的 Cookie 数量 和 每个 Cookie 的大小是有限制的，Cookie 不适合存放数据量大的信息</li>
<li>删除 Cookie 时，path 必须一致，否则不会删除</li>
<li>Java Servlet 中 Cookie 中文乱码解决（存放中文默认报错，可通过 URL 编码（工具类）来解决）</li>
</ol>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li>Session 是服务端技术，服务器在运行时为每一个用户的浏览器创建一个其独享的 Session 对象</li>
<li>由于 Session 为各个用户浏览器独享，所以用户在访问服务器的不同页面时，可以从各自的 Session 中 读取 &#x2F; 添加 数据，从而完成相应任务</li>
</ol>
<h3 id="Session-基本原理"><a href="#Session-基本原理" class="headerlink" title="Session 基本原理"></a>Session 基本原理</h3><ol>
<li>当用户打开浏览器，访问某个网站，<strong>操作 Session 时</strong>，服务器就会在内存中为该浏览品名<strong>分配</strong>一个 Session 对象，该 Session 对象被这个浏览器独占（JSESSIONID）</li>
<li>这个 Session 对象也可看做是一个容器， Session 对象默认存在时间为 30 min，也可修改（tomcat &#x2F; conf &#x2F; web.xml）</li>
</ol>
<h3 id="Session-存储结构"><a href="#Session-存储结构" class="headerlink" title="Session 存储结构"></a>Session 存储结构</h3><ol>
<li>Session 可看作是类似 HashMap 的容器，每一行（K-V）就是其一个属性</li>
<li>每个属性包含两个部分，名（String） 与 值（Object）</li>
</ol>
<h3 id="Session-常用方法"><a href="#Session-常用方法" class="headerlink" title="Session 常用方法"></a>Session 常用方法</h3><ol>
<li><p>创建 和 获取 Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">hs</span> <span class="operator">=</span> req.getSession();</span><br></pre></td></tr></table></figure>

<p><strong>第一次调用</strong> 是 <strong>创建</strong> Session 会话，之后调用是获取创建好的 Session 对象</p>
</li>
<li><p>向 Session 添加属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hs.setAttribute(String name, Object val);</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 Session 得到某个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> hs.getAttribute(String name);</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 Session 删除调某个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hs.removeAttribute(String name);</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断是不是刚创建出来的 Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hs.isNew();</span><br></pre></td></tr></table></figure>
</li>
<li><p>每个 Session 都有一个唯一标识 Id 值，通过 getId() 得到 Session 会话的 Id 值</p>
</li>
</ol>
<h3 id="Session-底层分析"><a href="#Session-底层分析" class="headerlink" title="Session 底层分析"></a>Session 底层分析</h3><img src="/2023/12/21/JavaWeb/image-20240104234506184.png" class title="image-20240104234506184">

<img src="/2023/12/21/JavaWeb/image-20240104235756344.png" class title="image-20240104235756344">

<h3 id="Session-生命周期"><a href="#Session-生命周期" class="headerlink" title="Session 生命周期"></a>Session 生命周期</h3><ol>
<li>setMaxInactiveInterval(int interval) -&gt; <em>设置 Session 超时时间（以秒为单位），超过指定的时长，Session 就会被销毁</em></li>
<li>值为正数的时候，设定 Session 的超时时长</li>
<li><strong>负数表示永不超时</strong></li>
<li>getMaxInactiveInterval() -&gt; <strong>获取 Session 的超时时间</strong></li>
<li>invalidate() -&gt; <strong>让当前 Session 会话立即无效</strong></li>
<li>如果没有调用 setMaxInactiveInterval() 来指定 Session 的生命周期，Tomcat 会以 Session 默认时长为准，Session 默认超时为 30 min，可以在 Tomcat 的 web.xml 中设置</li>
<li>Session 的生命周期指的是：客户端 <strong>同一会话两次请求</strong> 最大间隔时长，而不是累积时长。即当客户端访问了自己的 Session，Session 的生命周期将从 0 开始重新计算</li>
<li>底层：Tomcat 用一个线程来轮询会话状态，如果某个会话的空闲时间超过设定的最大值，则将该会话销毁</li>
</ol>
<h1 id="服务器端渲染技术"><a href="#服务器端渲染技术" class="headerlink" title="服务器端渲染技术"></a>服务器端渲染技术</h1><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>JSP 全称 Java Server Pages，即服务器渲染技术</li>
<li>JSP 技术基于 Servlet，可以理解成是对 Servlet 的包装（或就是 Servlet）</li>
<li>在 &lt;% %&gt; 标签中可以写 Java 代码</li>
</ol>
<h3 id="JSP-运行原理"><a href="#JSP-运行原理" class="headerlink" title="JSP 运行原理"></a>JSP 运行原理</h3><ol>
<li>JSP 页面本质是一个 Servlet 程序，其性能是和 Java 关联的</li>
<li>第一次访问 JSP 页面的时候，Tomcat 服务器会把 JSP 页面解析成为一个 Java 源文件，并且对它进行编译为 .class 字节码程序</li>
</ol>
<h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><h1 id="监听器-过滤器"><a href="#监听器-过滤器" class="headerlink" title="监听器 &amp; 过滤器"></a>监听器 &amp; 过滤器</h1><h2 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li>Listener 监听器是 JavaWeb 三大组件之一（Servlet | Listener | Filter）</li>
<li>Listener 是 JavaEE 的规范（即接口）</li>
<li>监听器作用：监听某种变化，触发对应方法完成相应的任务</li>
<li>JavaWeb 中的监听器（共八个），目前最常用的是 ServletContextListener</li>
</ol>
<h3 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a><strong>ServletContextListener</strong></h3><ol>
<li>作用：监听 ServletContext 创建或销毁（当 web 应用启动时，就会创建 ServletContext ），即 <strong>生命周期监听</strong> (使用前要在 web.xml 中注册)</li>
<li>相关方法：<ol>
<li>void contextInitialized(ServletContextEvent sce)</li>
<li>void contextDestroyed(ServletContextEvent sce)</li>
</ol>
</li>
<li>应用场景：<ol>
<li>加载初始化的配置文件（如 Spring 的配置文件）</li>
<li>任务调度（配合定时器 Timer &#x2F; TimerTask）</li>
</ol>
</li>
</ol>
<h3 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a><strong>ServletContextAttributeListener</strong></h3><ol>
<li>作用：监听 ServletContext 属性变化</li>
<li>相关方法：<ol>
<li>void attributeAdded(ServletContextAttributeEvent event) -&gt; <em>添加属性时调用</em></li>
<li>void attributeReplaced(ServletContextAttributeEvent event) -&gt; <em>替换属性时调用</em></li>
<li>void attributeRemoved(ServletContextAttributeEvent event) -&gt; <em>移除属性时调用</em></li>
</ol>
</li>
</ol>
<h3 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a><strong>HttpSessionListener</strong></h3><ol>
<li>作用：监听 Session 创建或销毁，即 <strong>生命周期监听</strong></li>
<li>相关方法：<ol>
<li>void sessionCreated(HttpSessionEvent se) -&gt; <em>创建 session 时调用</em></li>
<li>void sessionDestroyed(HttpSessionEvent se) -&gt; <em>销毁 session 时调用</em></li>
</ol>
</li>
<li>应用场景：<ol>
<li>监控用户上线、离线等</li>
</ol>
</li>
</ol>
<h3 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h3><ol>
<li>作用：监听 Session 属性的变化</li>
<li>相关方法：<ol>
<li>void attributeAdded(ServletRequestAttributeEvent srae) -&gt; <em>添加</em></li>
<li>void attributeReplaced(ServletRequestAttributeEvent srae) -&gt; <em>替换</em></li>
<li>void attributeRemoved(ServletRequestAttributeEvent srae) -&gt; <em>移除</em></li>
</ol>
</li>
<li>应用场景：较少</li>
</ol>
<h3 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a><strong>ServletRequestListener</strong></h3><ol>
<li>作用：监听 Request 创建或销毁，即 <strong>Request 生命周期监听</strong>，可得到 Request 中内容（若无法得到某一属性可能需要强转一下类型）</li>
<li>相关方法：<ol>
<li>void requestInitialized(ServletRequestEvent sre) -&gt; <em>创建 request 时</em></li>
<li>void requestDestroyed(ServletRequestEvent sre) -&gt; <em>销毁 request 时</em></li>
</ol>
</li>
<li>应用场景：<ol>
<li>可用于监控 IP 访问网站的频率、日志记录、访问资源等的情况</li>
</ol>
</li>
</ol>
<h3 id="ServletRequestAttributeListener"><a href="#ServletRequestAttributeListener" class="headerlink" title="ServletRequestAttributeListener"></a>ServletRequestAttributeListener</h3><ol>
<li>作用：监听 Request 属性变化</li>
<li>相关方法：<ol>
<li>void attributeAdded(ServletRequestAttributeEvent srae) -&gt; <em>添加</em></li>
<li>void attributeReplaced(ServletRequestAttributeEvent srae) -&gt; <em>替换</em></li>
<li>void attributeRemoved(ServletRequestAttributeEvent srae) -&gt; <em>移除</em></li>
</ol>
</li>
<li>应用场景：同上</li>
</ol>
<h3 id="其它-Listener"><a href="#其它-Listener" class="headerlink" title="其它 Listener"></a>其它 Listener</h3><ol>
<li>HttpSessionBindingListener -&gt; <em>将对象绑定至 Session 中感知监听（无需配置）</em></li>
<li>HttpSessionActivationListener -&gt; <em>感知监听非钝化（未持久化）对象</em></li>
</ol>
<h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h2><img src="/2023/12/21/JavaWeb/image-20240107131453593.png" class title="image-20240107131453593">

<h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li><p>Filter 过滤器 是 JavaWeb 三大组件之一（Servlet 程序、Listener 监听器、Filter 过滤器）</p>
</li>
<li><p>Filter 过滤器是 JavaEE 的规范（即接口）</p>
<img src="/2023/12/21/JavaWeb/image-20240107131842798.png" class title="image-20240107131842798">
</li>
<li><p>Filter 过滤器作用：拦截请求，过滤响应（<strong>转发不经过滤器</strong>）</p>
</li>
<li><p>应用场景：</p>
<ol>
<li>权限检查</li>
<li>日志操作</li>
<li>事务管理</li>
</ol>
</li>
</ol>
<h3 id="Filter-基本原理"><a href="#Filter-基本原理" class="headerlink" title="Filter 基本原理"></a>Filter 基本原理</h3><img src="/2023/12/21/JavaWeb/image-20240107144935405.png" class title="image-20240107144935405">

<h3 id="url-pattern"><a href="#url-pattern" class="headerlink" title="url-pattern"></a>url-pattern</h3><ol>
<li>url-pattern：Filter 的拦截路径，即浏览器在请求什么位置的资源时，过滤器会进行拦截过滤</li>
<li>精确匹配：<code>&lt;url-pattern&gt;/a.jsp&lt;/url-pattern&gt;</code> 对应的请求地址为 http:&#x2F;&#x2F;[ip]:port&#x2F;工程路径&#x2F;a.jsp 会拦截</li>
<li>目录匹配：<code>&lt;url-pattern&gt;/manage/*&lt;/url-pattern&gt;</code> 对应的请求地址为 http:&#x2F;&#x2F;[ip]:port&#x2F;工程路径&#x2F;manage&#x2F;xxx，即 web 工程 manage 目录下所有资源都会拦截</li>
<li>后缀名匹配：<code>&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</code> 对应的请求地址为 http:&#x2F;&#x2F;[ip]:port&#x2F;工程路径&#x2F;xxx.jsp （后缀为 .jsp 的请求都会拦截）</li>
<li><strong>Filter 过滤器只关心请求的地址是否匹配，不关心请求的资源是否存在</strong></li>
</ol>
<h3 id="Filter-生命周期（单例）"><a href="#Filter-生命周期（单例）" class="headerlink" title="Filter 生命周期（单例）"></a>Filter 生命周期（单例）</h3><img src="/2023/12/21/JavaWeb/image-20240107150415396.png" class title="image-20240107150415396">

<h3 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h3><img src="/2023/12/21/JavaWeb/image-20240107151403210.png" class title="image-20240107151403210">

<ol>
<li><p>FilterConfig 是 Filter 过滤器的配置类，其作用是 <strong>获取 Filter 过滤器的配置内容</strong></p>
</li>
<li><p>Tomcat 在创建 Filter 实例时，同时会创建一个 FilterConfig 对象（包含 Filter 配置文件的配置信息），并通过 init() 方法传入</p>
</li>
<li><p>配置图解</p>
<img src="/2023/12/21/JavaWeb/image-20240107151905384.png" class title="image-20240107151905384"></li>
</ol>
<h3 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h3><ol>
<li><p>在处理复杂业务时，可设计多个过滤器共同完成过滤任务，形成 <strong>过滤器链</strong></p>
</li>
<li><p>基本原理分析</p>
<img src="/2023/12/21/JavaWeb/image-20240107153419310.png" class title="image-20240107153419310">
</li>
<li><p>注意事项 &amp; 细节</p>
<ol>
<li>多个 Filter 和目标资源在一次 http 请求中生效，在同一个线程中</li>
<li>当一个请求 url 和 Filter 的 url-pattern 匹配时，才会被执行。如果有多个匹配上，就会依 web.xml 中的配置顺序执行，形成一个 FilterChain</li>
<li>多个 Filter 共同执行，使用同一个 request 对象（同一次请求）</li>
<li>filterChain.doFilter(req, resp) -&gt; <em>执行下一个过滤器的 doFilter() 方法，若之后无过滤器，则执行目标资源</em></li>
</ol>
</li>
</ol>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p> 文档速查：</p>
<ul>
<li><a href="https://www.w3school.com.cn/jquery/index.asp">https://www.w3school.com.cn/jquery/index.asp</a></li>
<li><a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn</a></li>
</ul>
<h2 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>jQuery 是一个快速的、简结的 JavaScript 库，使用户能更方便地处理 HTML</li>
<li>提供方法、events、选择器，并且方便地为网站提供 AJAX 交互</li>
<li>其宗旨是 <q>WRITE LESS, DO MORE</q></li>
<li>实现了浏览器兼容问题</li>
</ol>
<h2 id="jQuery-原理图解"><a href="#jQuery-原理图解" class="headerlink" title="jQuery 原理图解"></a>jQuery 原理图解</h2><img src="/2023/12/21/JavaWeb/image-20240107161758913.png" class title="image-20240107161758913">

<h2 id="jQuery-对象（数组对象）"><a href="#jQuery-对象（数组对象）" class="headerlink" title="jQuery 对象（数组对象）"></a>jQuery 对象（数组对象）</h2><ol>
<li><p>jQuery 对象就是对 DOM 对象进行包装后产生的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#test&quot;</span>).<span class="title function_">html</span>() <span class="comment">// 获取 id 为 test 的元素内的 HTML 代码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>jQuery 对象是 jQuery 独有的。如果一个对象是 jQuery 对象，那么它就可以使用 jQuery 里的</p>
</li>
<li><p>变量名约定：如果获取的是 jQuery 对象，那么变量名前要加上 $</p>
</li>
<li><p>对象互转：</p>
<ol>
<li>jQuery -&gt; DOM：<ol>
<li><u> jQuery 对象</u> &#x3D;  $( <u>DOM 对象</u> )</li>
</ol>
</li>
<li>DOM -&gt; jQuery：<ol>
<li><u>DOM 对象</u> &#x3D; <u> jQuery 对象</u>.get(0)</li>
<li><u>DOM 对象</u> &#x3D; <u> jQuery 对象</u>[0]</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li>选择器是 jQuery 的核心，在 jQuery 中，对事件处理，遍历 DOM 和 Ajax 操作都依赖于选择器</li>
<li>jQuery 选择器优点：<ol>
<li>简洁的写法</li>
<li>完善的事件处理机制</li>
</ol>
</li>
</ol>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ol>
<li>id 选择器：$(“#xxx”);</li>
<li>类选择器：$(“.xxx”);</li>
<li>元素选择器：$(“div”);</li>
<li>*选择器：匹配所有元素，多用于结合上下文搜索</li>
<li>组合选择器：以逗号分割</li>
</ol>
<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p>如果想通过 DOM 元素之间的层次关系来获取特定元素，如 后代元素、子元素、相邻元素、兄弟元素等，则需要使用层次选择器</p>
<ol>
<li><p>ancestor descendant</p>
<ol>
<li>用法：$(“form input”); -&gt; <em>返回 集合元素</em></li>
<li>说明：在 <u>给定的祖先元素下</u> 匹配 <u>所有后代元素</u></li>
</ol>
</li>
<li><p>parent &gt; child</p>
<ol>
<li><p>用法：$(form &gt; input); -&gt; <em>返回 集合元素</em></p>
</li>
<li><p>说明：在给定的父元素下匹配所有子元素</p>
<blockquote>
<p>注：要区分好 后代元素 与 子元素</p>
</blockquote>
</li>
</ol>
</li>
<li><p>prev + next</p>
<ol>
<li>用法：$(label _ input); -&gt; <em>返回 集合元素</em></li>
<li>说明：匹配所有紧接在 prev 元素后的 next 元素</li>
</ol>
</li>
<li><p>prev ~ siblings</p>
<ol>
<li><p>用法：$(form ~ input); -&gt; <em>返回 集合元素</em></p>
</li>
<li><p>说明：匹配 prev 元素之后的所有 siblings 元素</p>
<blockquote>
<p>注：是匹配之后的元素，不包含该元素在内，并且 siblings 匹配的是和 prev 同辈的元素，其后辈元素不被匹配</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h3 id="基础过滤选择器"><a href="#基础过滤选择器" class="headerlink" title="基础过滤选择器"></a>基础过滤选择器</h3><ul>
<li>过滤内容为相对 <strong>前</strong> 或 <strong>后</strong> 等</li>
</ul>
<h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><ul>
<li>过滤规则主要体现在它所包含的 <strong>子元素</strong> 和 <strong>文本内容</strong> 上</li>
</ul>
<h3 id="可见度过滤选择器"><a href="#可见度过滤选择器" class="headerlink" title="可见度过滤选择器"></a>可见度过滤选择器</h3><ul>
<li>根据元素的 <strong>可见</strong> 和 <strong>不可见</strong> 状态来选择相应的元素</li>
</ul>
<h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><ul>
<li>过滤规则是通过 <strong>元素的属性</strong> 来获取相应的元素</li>
</ul>
<h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><ul>
<li>对子元素进行选择过滤</li>
</ul>
<h3 id="表单属性过滤选择器"><a href="#表单属性过滤选择器" class="headerlink" title="表单属性过滤选择器"></a>表单属性过滤选择器</h3><ul>
<li>主要对 <strong>表单元素</strong> 进行过滤</li>
</ul>
<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><h2 id="jQuery-の-DOM-操作"><a href="#jQuery-の-DOM-操作" class="headerlink" title="jQuery の DOM 操作"></a>jQuery の DOM 操作</h2><h3 id="查找节点，修改属性"><a href="#查找节点，修改属性" class="headerlink" title="查找节点，修改属性"></a>查找节点，修改属性</h3><ol>
<li>查找到属性节点后，可以调用 jQuery 对象的 attr() 方法来获取它的各种属性值</li>
</ol>
<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><ol>
<li><p>介绍：</p>
<ol>
<li><p>创建：使用 jQuery 的工厂函数 <code>$():$(HTML标签);</code> 会根据传入的 HTML 标记字符串创建一个 jQuery 对象 并返回</p>
</li>
<li><p>动态创建的新元素节点不会被自动添加至文档中，而是需要使用其它方法将其插入至文档中</p>
</li>
<li><p>当创建单个元素时，需注意闭合标签和使用标准的 XHTML 格式</p>
</li>
<li><p>创建文本节点 就是在创建元素节点时直接把文本内容写出来；属性节点同上</p>
</li>
</ol>
</li>
<li><p>插入方法：</p>
<ol>
<li><p>内部插入法：在元素内插入内容（该内容变成该元素的子元素或节点）</p>
</li>
<li><p>外部插入法：在元素外插入内容（该内容变成该元素的兄弟节点）</p>
<blockquote>
<p>注：外部插入法 不但能将新 DOM 元素插入到文档中，也能对原有的 DOM 元素进行移动</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol>
<li>remove() -&gt; <em>从 DOM 中删除所有匹配元素，传入的参数用于根据 jQuery 表达式来筛选元素。当某个节点被删除后，该节点所包含的所有后代节点将被同时删除，返回一个指向已被删除的节点的引用</em></li>
<li>empty() -&gt; <em>清空元素中所有的后代节点（不包含属性节点）</em></li>
</ol>
<h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><ol>
<li>clone() -&gt; <em>克隆匹配的 DOM 元素，返回克隆后的副本（但此时复制的新节点不具有任何事件行为）</em></li>
<li>clone(true) -&gt; <em>复制元素的同时也复制元素中的事件</em></li>
</ol>
<h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ol>
<li><p>replaceWith() -&gt; <em>将所有匹配到的元素都替换为指定的 HTML 或 DOM 元素</em></p>
<blockquote>
<p>注：或在替换之前，已经在元素上绑定了事件，替换后原先绑定的事件会与原先的元素一起消失</p>
</blockquote>
</li>
</ol>
<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><h3 id="获取-HTML-文本-和-值"><a href="#获取-HTML-文本-和-值" class="headerlink" title="获取 HTML 文本 和 值"></a>获取 HTML 文本 和 值</h3><h3 id="常用遍历节点方法"><a href="#常用遍历节点方法" class="headerlink" title="常用遍历节点方法"></a>常用遍历节点方法</h3><img src="/2023/12/21/JavaWeb/image-20240108131535820.png" class title="image-20240108131535820">

<h3 id="CSS-DOM-操作"><a href="#CSS-DOM-操作" class="headerlink" title="CSS-DOM 操作"></a>CSS-DOM 操作</h3><h1 id="数据交换-异步请求"><a href="#数据交换-异步请求" class="headerlink" title="数据交换 &amp; 异步请求"></a>数据交换 &amp; 异步请求</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h2 id="AJAX-Asynchronous-JavaScript-And-XML"><a href="#AJAX-Asynchronous-JavaScript-And-XML" class="headerlink" title="AJAX (Asynchronous JavaScript And XML)"></a>AJAX (Asynchronous JavaScript And XML)</h2><h3 id="原理图解"><a href="#原理图解" class="headerlink" title="原理图解"></a>原理图解</h3><img src="/2023/12/21/JavaWeb/image-20240112150601609.png" class title="image-20240112150601609">

<h3 id="jQuery-封装"><a href="#jQuery-封装" class="headerlink" title="jQuery 封装"></a>jQuery 封装</h3><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>搜索引擎自动提示检索关键字</li>
<li>动态加载数据</li>
</ol>
<h1 id="线程数据共享-安全-ThreadLocal"><a href="#线程数据共享-安全-ThreadLocal" class="headerlink" title="线程数据共享 &amp; 安全 - ThreadLocal"></a>线程数据共享 &amp; 安全 - ThreadLocal</h1><h2 id="什么是-ThreadLocal"><a href="#什么是-ThreadLocal" class="headerlink" title="什么是 ThreadLocal"></a>什么是 ThreadLocal</h2><ol>
<li>ThreadLocal 可以实现 <strong>在同一个线程数据共享</strong>，从而解决多线程数据安全问题</li>
<li>ThreadLocal 可以给 当前线程 关联 <strong>一个</strong> 数据（普通变量、对象、数组）set 方法</li>
<li>ThreadLocal 可以像 Map 一样存取数据，key 为当前线程，get 方法</li>
<li>每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个 ThreadLoal 对象实例</li>
<li>每个 ThreadLocal 对象实例定义的时候，一般为 static 类型</li>
<li>ThreadLocal 中保存数据，在线程销毁后，会自动释放</li>
</ol>
<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><img src="/2023/12/21/JavaWeb/image-20240113180646844.png" class title="image-20240113180646844">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span> <span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取当前线程，关联到当前线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">// 2. 通过线程对象，获取到 ThreadLocalMap （其静态内部类）</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">// 3. 如果 map 不为 null，将数据（dog、pig...）放入 map</span></span><br><span class="line">    <span class="comment">//    key = threadLocal, value:(存放的数据)</span></span><br><span class="line">    <span class="comment">// 4. 如果 map 为 null，就创建一个和当前线程关联的 ThreadLocalMap，并且将该数据放入</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h1><h2 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol>
<li><p>文件的上传和下载是 web 常见功能</p>
</li>
<li><p>传输大文件一般用专门的工具或插件</p>
</li>
<li><p>需要两个包</p>
<img src="/2023/12/21/JavaWeb/image-20240113182144103.png" class title="image-20240113182144103"></li>
</ol>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><img src="/2023/12/21/JavaWeb/image-20240113235508142.png" class title="image-20240113235508142">

<img src="/2023/12/21/JavaWeb/image-20240113184134139.png" class title="image-20240113184134139">

<img src="/2023/12/21/JavaWeb/image-20240113184201346.png" class title="image-20240113184201346">

<img src="/2023/12/21/JavaWeb/image-20240113234540687.png" class title="image-20240113234540687">

<h3 id="注意事项-细节-2"><a href="#注意事项-细节-2" class="headerlink" title="注意事项 &amp; 细节"></a>注意事项 &amp; 细节</h3><ol>
<li>如果将文件都上传到一个目录下，当上传文件很多时，会造成访问文件速度变慢，因此可以将文件上传到不同目录（如微信存储目录结构）</li>
<li>一个完美的文件上传，要考虑因素如 断点续传，控制图片大小、尺寸，分片上传，防止恶意上传等。在项目中，可考虑使用 WebUploader 组件（by 百度）</li>
<li>文件上传功能在项目中建议有限制使用，一般用于 头像、证明、合同、产品展示等，如果不加限制，磁盘空间将被大量占用（如 b站评论不能传图、微信一次朋友圈最多9张图）</li>
<li>文件覆盖问题：采用系统生成 UUID 用 _ 与文件名相连解决</li>
</ol>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="原理分析图"><a href="#原理分析图" class="headerlink" title="原理分析图"></a>原理分析图</h3><img src="/2023/12/21/JavaWeb/image-20240115001237881.png" class title="image-20240115001237881">

<img src="/2023/12/21/JavaWeb/image-20240115001455422.png" class title="image-20240115001455422">

<h3 id="注意事项-细节-3"><a href="#注意事项-细节-3" class="headerlink" title="注意事项 &amp; 细节"></a>注意事项 &amp; 细节</h3><ol>
<li>文件中文名处理</li>
</ol>
<h1 id="项目-家居网购"><a href="#项目-家居网购" class="headerlink" title="[项目] 家居网购"></a>[项目] 家居网购</h1><p>Repo:</p>
<ul>
<li><a href="https://github.com/kkyesyes/JavaWebQuiz">家居网购 (Github)</a></li>
</ul>
<p>Note:（笔记部分在项目总帖中）</p>
<p>前置基础</p>
<ul>
<li>正则表达式 (P877)</li>
<li>MySQL (P730)</li>
<li>JDBC (P820)</li>
<li>数据库连接池 (P841)</li>
<li>满汉楼 (P858)</li>
</ul>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 笔记</title>
    <url>/2024/01/08/Maven/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV14j411S76G">Apache Maven 依赖管理 极速上手 已完结（2021 版本）4K蓝光画质+杜比音效 从导入到冲突</a></p>
<h1 id="笔记引用"><a href="#笔记引用" class="headerlink" title="笔记引用"></a>笔记引用</h1><p><a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
]]></content>
      <categories>
        <category>Java 包管理</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 笔记【完结】</title>
    <url>/2024/02/14/JavaSE/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&vd_source=760264507c20c8ac38634e47af1aa1fa">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/video/BV1tU4y1y7Fg">JavaSE 9-17 新特性 已完结（IDEA 2022.1最新版）4K蓝光画质 - by 青空の霞光</a></p>
<h1 id="笔记引用"><a href="#笔记引用" class="headerlink" title="笔记引用"></a>笔记引用</h1><p><a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h1 id="基本类型-引用类型"><a href="#基本类型-引用类型" class="headerlink" title="基本类型 &amp; 引用类型"></a>基本类型 &amp; 引用类型</h1><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h1 id="进制-数的存储-位运算"><a href="#进制-数的存储-位运算" class="headerlink" title="进制 &amp; 数的存储 &amp; 位运算"></a>进制 &amp; 数的存储 &amp; 位运算</h1><h1 id="分支-循环"><a href="#分支-循环" class="headerlink" title="分支  循环"></a>分支  循环</h1><h2 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else if else"></a>if else if else</h2><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="&#x3D;&#x3D;运算符"></a>&#x3D;&#x3D;运算符</h2><h2 id="子类重写equals"><a href="#子类重写equals" class="headerlink" title="子类重写equals"></a>子类重写equals</h2><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><h2 id="项目1-零钱通"><a href="#项目1-零钱通" class="headerlink" title="[项目1]零钱通"></a>[项目1]零钱通</h2><p>(未做)</p>
<p>|———-</p>
<h1 id="类基础"><a href="#类基础" class="headerlink" title="类基础"></a>类基础</h1><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h1 id="抽象类-接口"><a href="#抽象类-接口" class="headerlink" title="抽象类 &amp; 接口"></a>抽象类 &amp; 接口</h1><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul>
<li>基本介绍：<ol>
<li>一个类的内部又完整的嵌套了另一个类结构</li>
<li>其最大特点就是 <strong>可以直接访问私有属性</strong> ，并且可以体现类与类之间的包含关系</li>
<li>是类的第五大成员（属性、方法、构造器、代码块、内部类）</li>
</ol>
</li>
</ul>
<h2 id="局部内部类（有类名）"><a href="#局部内部类（有类名）" class="headerlink" title="局部内部类（有类名）"></a>局部内部类（有类名）</h2><ol>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>不能添加访问修饰符。因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰（则不能被继承），因为局部变量也可以使用final</p>
</li>
<li><p>作用域：仅仅在定义它的方法或代码块中</p>
</li>
<li><p>局部内部类  –直接访问–&gt;  外部类的成员</p>
</li>
<li><p>外部类  –创建对象后访问(作用域内)–&gt;  局部内部类成员</p>
<blockquote>
<p>谨记：</p>
<ol>
<li>局部内部类定义在 （通常）方法 &#x2F;代码块 中</li>
<li>作用域在 方法体 或者 代码块 中</li>
<li>本质仍然是一个类</li>
</ol>
</blockquote>
</li>
<li><p>外部其它类  –不能访问–&gt; 局部内部类（因为局部内部类地位是局部变量）</p>
</li>
<li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则。如果想访问外部类的成员，则可以使用（外部类名.this.成员）访问</p>
</li>
</ol>
<h2 id="匿名内部类（没有类名）"><a href="#匿名内部类（没有类名）" class="headerlink" title="匿名内部类（没有类名）"></a>匿名内部类（没有类名）</h2><ol>
<li><p>基本语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cring...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.cry();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<ul>
<li>本质是类</li>
<li>内部类</li>
<li>匿名</li>
<li>同时也是一个对象</li>
</ul>
</blockquote>
</li>
<li><p>应用实践</p>
<ol>
<li>当做实参直接传递</li>
</ol>
</li>
</ol>
<h2 id="成员内部类（无static修饰）"><a href="#成员内部类（无static修饰）" class="headerlink" title="成员内部类（无static修饰）"></a>成员内部类（无static修饰）</h2><ul>
<li>成员内部类是定义在外部类的成员位置，并且 无static修饰</li>
</ul>
<ol>
<li>可以直接访问外部类的所有成员，包含私有的</li>
<li>可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员</li>
<li>作用域：同外部类的其他成员一样，为整个类体</li>
</ol>
<h2 id="静态内部类（static修饰）"><a href="#静态内部类（static修饰）" class="headerlink" title="静态内部类（static修饰）"></a>静态内部类（static修饰）</h2><ul>
<li>静态内部类是定义在外部类的成员位置，并且有static修饰</li>
</ul>
<ol>
<li>可以直接访问外部类的所有<strong>静态成员</strong>，包含私有的，但不能直接访问非静态成员</li>
<li>可以添加任意修饰符（成员地位）</li>
<li>作用域：同其它成员，为整个类体</li>
</ol>
<h1 id="枚举类-Enumeration"><a href="#枚举类-Enumeration" class="headerlink" title="枚举类(Enumeration)"></a>枚举类(Enumeration)</h1><ol>
<li><p>基本定义：枚举是一组常量的集合，特殊的类，里面只包含一组有限的特定的对象，<strong>类中成员默认为private修饰</strong></p>
</li>
<li><p>实现方式：</p>
<ol>
<li>自定义类实现枚举<ol>
<li>不需要提供setXxx方法，因为枚举对象值通常为只读</li>
<li>对枚举对象&#x2F;属性使用 final + static 共同修饰，实现底层优化</li>
<li>枚举对象名通常要使用全部大写（常量命名规范）</li>
<li>枚举对象根据需要，也可以有多个属性</li>
</ol>
</li>
<li>使用enum关键字实现枚举<ol>
<li>当使用enum关键字开发一个枚举类时，默认会继承Enum类</li>
<li>传统的<code>public static final Season2 SPRING = new Season2(&quot;春天&quot;, &quot;温暖&quot;);</code> 简化成 <code>SPRING(&quot;春天&quot;, &quot;温暖&quot;)</code>，这里必须知道它调用的哪个构造器</li>
<li>若使用无参构造器 创建 枚举对象，则 <strong>实参列表</strong> 和 <strong>小括号</strong> 都可以省略</li>
<li>当有多个枚举对象时，使用 <strong>逗号</strong> 间隔，最后以一个分号结尾</li>
<li>枚举对象必须放在枚举类的行首</li>
</ol>
</li>
</ol>
</li>
<li><p>Enum常用方法：</p>
<img src="/2024/02/14/JavaSE/image-20231212192133824.png" class title="image-20231212192133824">
</li>
<li><p>enum实现接口：</p>
<ol>
<li>不能继承其它类（因为已经隐式继承Enum类）</li>
<li>可以实现接口（同其它类一样）</li>
</ol>
</li>
</ol>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li>理解：<ol>
<li>注解(Annotation)也被称为 元数据(Metadata)，用于修饰 包、类、方法、属性、构造器、局部变量 等数据信息</li>
<li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li>
<li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版本中所遗留的繁冗代码和XML配置等</li>
</ol>
</li>
</ul>
<h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><ol>
<li><p>限定某个方法，是重写父类方法，该注解只能用于方法</p>
<blockquote>
<p>@interface</p>
<ul>
<li>@interface 不是 interface，是注解类（jdk5.0后加入）</li>
</ul>
</blockquote>
</li>
<li><p>只能修饰方法，不能修饰其它类、包、属性等</p>
</li>
<li><p>未加该注解的重写 仍构成重写</p>
</li>
<li><p>查看@Override注解源码为 @Target(ElementType.METHOD)，说明只能修饰方法</p>
</li>
<li><p>@Target是修饰注解的注解，称为元注解</p>
</li>
</ol>
<h2 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h2><ol>
<li>用于表示某个程序元素（类、方法等）已过时</li>
<li>可以修饰方法、类、字段、包、参数 等等</li>
<li>@Target(value&#x3D;{CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})</li>
<li>@Deprecated的作用可以做到新旧版本的兼容和过渡</li>
</ol>
<h2 id="SuppressWarnings-“xxx”-“xxx”"><a href="#SuppressWarnings-“xxx”-“xxx”" class="headerlink" title="@SuppressWarnings({“xxx”, “xxx”})"></a>@SuppressWarnings({“xxx”, “xxx”})</h2><ol>
<li>抑制编译器警告</li>
</ol>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ol>
<li><p>基本介绍</p>
<p>JDK的元Annotation用于修饰其它Annotation</p>
<blockquote>
<p>元注解：本身作用不大，看懂即可</p>
</blockquote>
</li>
<li><p>种类</p>
<ol>
<li><p>@Retention -&gt; <em>指定注解的作用范围，三种 SOURCE, CLASS, RUNTIME</em></p>
<ol>
<li>RetentionPolicy.SOURCE -&gt; <em>编译器使用后，直接丢弃这种策略的注解</em></li>
<li>RetentionPolicy.CLASS -&gt; <em>编译器将把注解记录在class文件中，当运行Java程序时，JVM不会保留注解（默认）</em></li>
<li>RetentionPolicy.RUNTIME -&gt; <em>编译器将把注解记录在class文件中，当运行Java程序时，JVM会保留注解，程序可以通过反射获取该注解</em></li>
</ol>
</li>
<li><p>@Target -&gt; <em>指定被修饰的注解可以用于修饰哪些程序元素（包含一个名为value的成员变量）</em></p>
</li>
<li><p>@Documented -&gt; <em>指定该注解是否会在javadoc体现（即生成文档时可以看到该注解）</em></p>
<blockquote>
<p>注：定义为Documented的注解必须设置Retention值为RUNTIME</p>
</blockquote>
</li>
<li><p>@Inherited -&gt; <em>子类会继承父类注解</em></p>
<p>被它修饰的Annotation将具有继承性。若某个类使用了被它修饰的Annotation，则其子类将自动具有该注解（实际应用较少）</p>
</li>
</ol>
</li>
</ol>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><h2 id="五大运行时异常"><a href="#五大运行时异常" class="headerlink" title="五大运行时异常"></a>五大运行时异常</h2><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><blockquote>
<p>Throw VS Throws</p>
</blockquote>
<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="八大Wrapper类"><a href="#八大Wrapper类" class="headerlink" title="八大Wrapper类"></a>八大Wrapper类</h2><h2 id="装箱-拆箱"><a href="#装箱-拆箱" class="headerlink" title="装箱 &amp; 拆箱"></a>装箱 &amp; 拆箱</h2><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ol>
<li><p>Integer创建机制</p>
<p>若初始值大小在cache范围内(-128~127)则不new，否则会new一个Integer对象.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：Integer对象在与基本类型如int进行&#x3D;&#x3D;比较时比的是值</p>
</li>
</ol>
<h2 id="String-类-不可变字符序列-效率低-复用率高"><a href="#String-类-不可变字符序列-效率低-复用率高" class="headerlink" title="String 类 -&gt;不可变字符序列 效率低 复用率高"></a>String 类 -&gt;<em>不可变字符序列 效率低 复用率高</em></h2><ol>
<li><p>Serializable(串行化) -&gt; 代表可以在网络中传输</p>
</li>
<li><p>Comparable -&gt; 说明String对象可以比较</p>
</li>
<li><p>是<strong>final类</strong>，不能被继承</p>
</li>
<li><p>底层是用private <strong>final</strong>(指地址不可更改) char value[];来存放字符串内容</p>
</li>
<li><p>对象创建</p>
<ol>
<li><p><strong>直接赋值</strong><code>String s = &quot;xxx&quot;;</code></p>
<p>先从<strong>常量池</strong>查看是否有”xxx”数据空间，如有则指向，否则重新创建后指向。s最终指向<strong>常量池的空间地址</strong>。</p>
</li>
<li><p>调用构造器<code>String s2 = new String(&quot;xxx&quot;);</code></p>
<p>在堆中创建空间，维护value属性，指向常量池的xxx空间。常量池中有”xxx”则通过value指向，无则创建后指向。s2最终指向堆中的空间地址。</p>
</li>
</ol>
</li>
<li><p>intern()方法 -&gt; 返回常量池地址</p>
</li>
<li><p>charAt()方法 -&gt; 获取某索引处的字符，注意<strong>不能使用 Str [ index ] 这种写法</strong></p>
</li>
<li><p>对象特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="comment">// 先创建一个StringBuilder sb = StringBuilder()</span></span><br><span class="line"><span class="comment">// 执行 sb.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//     sb.append(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">// String c = sb.toString();</span></span><br><span class="line"><span class="comment">// 最后c指向堆中的对象(底层new出)指向池中的&quot;helloabc&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>常量相加看池，变量相加看堆</strong></p>
<p>例题：</p>
<img src="/2024/02/14/JavaSE/image-20230901115129955.png" class title="image-20230901115129955"></li>
</ol>
<h2 id="StringBuffer-类-可变字符序列-效率高-增删-线程安全"><a href="#StringBuffer-类-可变字符序列-效率高-增删-线程安全" class="headerlink" title="StringBuffer 类 -&gt;可变字符序列 效率高(增删) 线程安全"></a>StringBuffer 类 -&gt;<em>可变字符序列 效率高(增删) 线程安全</em></h2><ol>
<li><p>java.lang.StringBuffer代表可变字符序列(<strong>可变长度</strong>)，可对字符串内容进行增删</p>
</li>
<li><p>直接父类为AbstractStringBuilder</p>
</li>
<li><p>实现 Serializable， 可串行化</p>
</li>
<li><p>是 <strong>final 类</strong></p>
</li>
<li><p>父类 AbstractStringBuilder 有<strong>非final</strong>属性 char[] value。</p>
<p>value 数组存放字符串内容， 因此是<strong>存放在堆中的</strong></p>
</li>
<li><p>常用方法：</p>
<ol>
<li>append(String s)</li>
<li>delete(int start, int end) -&gt; <em>删除子串 | 左闭右开</em></li>
<li>replace(int start, int end, String s) -&gt; <em>将索引 [start, end)内的字符替换为 s</em></li>
<li>indexOf(String s) -&gt; <em>查找指定字串s在字符串中第一次出现的索引，找不到返回-1</em></li>
<li>insert(int index, String s) -&gt; <em>在索引为 index 处插入 s</em></li>
<li>length()</li>
</ol>
</li>
</ol>
<h2 id="String与StringBuffer互转"><a href="#String与StringBuffer互转" class="headerlink" title="String与StringBuffer互转"></a>String与StringBuffer互转</h2><ol>
<li><p><strong>–&gt;</strong>:</p>
<ol>
<li><p>构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>StringBuffer.append():</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">sb = sb.append(s);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>&lt;–</strong>:</p>
<ol>
<li><p>构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(sb);</span><br></pre></td></tr></table></figure>
</li>
<li><p>StringBuffer.toString():</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="StringBuilder-类-可变字符序列-效率最高-线程不安全"><a href="#StringBuilder-类-可变字符序列-效率最高-线程不安全" class="headerlink" title="StringBuilder 类 -&gt;可变字符序列 效率最高 线程不安全"></a>StringBuilder 类 -&gt;<em>可变字符序列 效率最高 线程不安全</em></h2><ol>
<li><p>可变字符序列。提供与StringBuffer兼容的API，但其方法没有做互斥处理(无synchronized)，不保证同步(非线程安全)</p>
<p>该类被设计用作StringBuffer的一个简易替换，用在<strong>字符串缓冲区被单个线程使用</strong>的时候。</p>
<p>建议优先使用(大多数实现中比StringBuffer快)</p>
</li>
<li><p>StringBuilder上的主要操作是append和insert方法(可重载以接受任意类型的数据)</p>
</li>
<li><p>是<strong>final类</strong>，不能被继承</p>
</li>
<li><p>实现Serializable， 可串行化</p>
</li>
<li><p>对象字符序列存放在其父类的char[] value(堆)中</p>
</li>
</ol>
<h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><h2 id="Arrays-类-包含一系列静态方法，用于管理-操作数组-如排序-and搜索"><a href="#Arrays-类-包含一系列静态方法，用于管理-操作数组-如排序-and搜索" class="headerlink" title="Arrays 类 -&gt; 包含一系列静态方法，用于管理&amp;操作数组 (如排序 and搜索)"></a>Arrays 类 -&gt; <em>包含一系列静态方法，用于管理&amp;操作数组 (如排序 and搜索)</em></h2><ol>
<li><p>toString() -&gt; <em>返回数组的字符串形式</em></p>
</li>
<li><p>sort() -&gt; <em>自然排序和定制排序</em></p>
<p>定制排序 -&gt; <em>Arrays.sort(待排数组, 匿名内部类)</em></p>
</li>
<li><p>binarySearch() -&gt; <em>通过二分搜索法进行*<em>查找</em></em>(对升序序列),不存在返回-1*</p>
</li>
<li><p>copyOf -&gt; <em>数组元素的复制</em></p>
<p>拷贝长度 &gt; arr.length 则填充null</p>
<p>拷贝长度 &lt; 0 则throw Exceptions</p>
<p>底层使用System.arraycopy()</p>
</li>
<li><p>fill -&gt; <em>数组元素的填充</em></p>
<p>填充后数组中<strong>所有元素的值</strong>均为传入参数</p>
</li>
<li><p>equals -&gt; <em>比较两个数组元素内容是否完全一致</em></p>
<p>返回 传入arr1 与 arr2的元素内容是否相同的bool值</p>
</li>
<li><p>asList -&gt; <em>将一组值转换成 list</em></p>
<p>返回的编译类型为List(接口)，其运行类型为java.util.Arrays#ArrayList(Arrays类的静态内部类)</p>
</li>
</ol>
<h2 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h2><ol>
<li>exit() -&gt; <em>退出当前程序</em></li>
<li>arraycopy() -&gt; <em>复制数组元素，一般用于底层调用</em></li>
<li>currentTimeMillens() -&gt; <em>返回当前时间距离1970-1-1的毫秒数</em></li>
<li>gc() -&gt; <em>运行垃圾回收机制</em></li>
</ol>
<h2 id="BigInteger-BigDecimal-类-将大数的字符串形式传入构造"><a href="#BigInteger-BigDecimal-类-将大数的字符串形式传入构造" class="headerlink" title="BigInteger &amp; BigDecimal 类 -&gt; 将大数的字符串形式传入构造"></a>BigInteger &amp; BigDecimal 类 -&gt; <em>将大数的字符串形式传入构造</em></h2><ol>
<li><p>BigInteger&#x2F;BigDecimal常用方法</p>
<ol>
<li><p>add()</p>
</li>
<li><p>subtract()</p>
</li>
<li><p>multiply()</p>
</li>
<li><p>divide()</p>
<p>BigDecimal使用时注意可能throw无限循环小数异常，通过指定精度<code>b1.divide(b2, BigDecimal.ROUND_CEILING)</code>来使结果<strong>保留分子精度</strong></p>
<p>推荐使用<code>b1.divide(b2, RoundingMode.CEILING)</code>-(2023-9-2)</p>
</li>
</ol>
</li>
<li><p>总结：</p>
<p>BigInteger   处理大整型</p>
<p>BigDecimal 处理高精度浮点</p>
</li>
</ol>
<h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><ol>
<li><p>第一代日期类</p>
<ol>
<li><p>Date类 -&gt; (java.util.Date)精确到毫秒，代表特定瞬间</p>
</li>
<li><p>SimpleDateFormat类 -&gt; 格式化和解析日期(即用即查)</p>
<ol>
<li><p>日期 -&gt; 日期: 格式化</p>
<p>new一个模板对象，传入格式字符串(格式控制字符是规定好的)，后调用模板对象的format()函数传入raw data返回格式化后的string</p>
</li>
<li><p>日期 -&gt; 文本: 解析</p>
</li>
<li><p>文本 -&gt; 日期: 规范化</p>
<p>调用模板对象的parse()方法传入raw string返回对应Date规范的数据</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>第二代日期类</p>
<ol>
<li><p>Calendar类 -&gt; 抽象类，为 <strong>特定瞬间与日历字段的转换&amp; 操作日历字段</strong> 提供方法</p>
<ol>
<li><p>构造器为private，<strong>不能使用new</strong></p>
</li>
<li><p>可通过getInstance()获取实例</p>
</li>
<li><p>提供大量方法和字段</p>
</li>
<li><p>调用方式：(无专门格式化方法，需自行组合)</p>
<p>c.get( Calendar.字段 )  <em>注：调用月份字段时返回要+1(默认从0开始)</em></p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>第三代日期类 -&gt; <em>jdk8加入</em></p>
<ol>
<li><p>LocalDate -&gt; <em>日期：年月晶</em></p>
</li>
<li><p>LocalTime -&gt; <em>时间：时分秒</em></p>
</li>
<li><p>LocalDateTime -&gt; <em>日期+时间：年月日时分秒</em></p>
</li>
<li><p>常用方法：</p>
<p><code>LocalDateTime ldt = LocalDateTime.now()</code></p>
<p>now()方法返回表示当前日期时间的对象</p>
<p>后可调用ldt的诸多方法获取细节内容</p>
</li>
<li><p>DateTimeFormatter 格式日期类 -&gt; <em>类似SimpleDateFormat</em></p>
</li>
<li><p>Instant 时间戳 -&gt; <em>类似于Date，提供与Date类的转换方法</em></p>
<ol>
<li><p>Instant -&gt; Date:</p>
<p><code>Date date = Date.from(instant);</code></p>
</li>
<li><p>Date -&gt; Instant:</p>
<p><code>Instant instant = date.toInstant();</code></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><strong>集合：</strong>主分为<strong>单列集合</strong>和<strong>双列集合</strong>可以动态保存任意多个对象，提供操作对象的方法，代码简洁</p>
<h2 id="Collection-单列集合接口-存放单个元素"><a href="#Collection-单列集合接口-存放单个元素" class="headerlink" title="Collection -&gt; 单列集合接口 -&gt; 存放单个元素"></a>Collection -&gt; 单列集合接口 -&gt; 存放单个元素</h2><p><em>下图重点：</em></p>
<img src="/2024/02/14/JavaSE/image-20230903105315583.png" class title="image-20230903105315583">

<ol>
<li><p>常用方法：</p>
<ol>
<li>add()</li>
<li>remove()</li>
<li>contains() -&gt; <em>查找元素是否存在</em></li>
<li>size()</li>
<li>isEmpty()</li>
<li>clear()</li>
<li>addAll()</li>
</ol>
</li>
<li><p>遍历方式</p>
<ol>
<li><p>Iterator -&gt; <em>(itit + tab)</em></p>
<p>所有实现了Collection接口的集合类都有一个Iterator方法(继承自Iterable)，用以返回一个实现了Iterator接口的对象(迭代器)</p>
<p>Iterator仅用于遍历，本身不存放对象</p>
<p><strong>常用方法</strong>：</p>
<ol>
<li>hasNext()</li>
<li>next()</li>
<li>remove()</li>
</ol>
</li>
<li><p>for -&gt; <em>只能用于遍历集合和数组，底层仍是迭代器 (I + tab)</em></p>
<p><code>for (Object obj : collection) &#123; &#125;</code></p>
</li>
</ol>
</li>
<li><p><strong>List</strong>子接口</p>
<ol>
<li><p>特性：</p>
<ol>
<li>元素有序，可重复</li>
<li>支持索引(<strong>.get(index)</strong>) -&gt; <em>可索引遍历</em></li>
</ol>
</li>
<li><p>实现类：</p>
<ol>
<li><p><strong>ArrayList</strong></p>
<ol>
<li><p>可以加入null</p>
</li>
<li><p>底层由数组实现</p>
</li>
<li><p>基本等同于Vector，但**线程不安全(执行效率高)**，多线程不建议使用</p>
</li>
<li><p><strong>底层机制源码分析</strong></p>
<ol>
<li><p>ArrayList中维护了一个Object数组elementData</p>
<p><code>transient Object[] elementData;</code></p>
<p><strong>transient</strong>：瞬间&#x2F;短暂 -&gt; 表示属性不会被序列化?</p>
</li>
<li><p>创建对象时 若用无参构造则初始elementData &#x3D;&#x3D; 0 (10 in jdk7)</p>
</li>
<li><p>添加元素时 判断若需扩容则调grow()，否则直接添加</p>
</li>
<li><p>使用无参构造 且 第一次添加，若需扩容则扩容elementData为10，如需再次扩容则扩容elementData为1.5倍</p>
</li>
<li><p>如使用指定容量capacity的构造器，则初始elementData &#x3D;&#x3D; capacity，如需扩容则扩为1.5倍</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>LinkedList</strong></p>
<ol>
<li><p>实现了<strong>双向链表</strong>和<strong>双端队列</strong>的特点</p>
</li>
<li><p>可以添加任意元素包括null</p>
</li>
<li><p><strong>线程不安全</strong>(无同步)</p>
</li>
<li><p><strong>底层机制源码分析</strong></p>
<ol>
<li>底层维护了一个双向链表</li>
<li>维护了两个属性：first(首节点)和last(尾节点)</li>
<li>每个节点(Node对象)里又维护了prev(前一个)、next(后一个)、item()三个属性，实现双向链表</li>
<li>元素添加删除效率高</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>Stack</strong></p>
</li>
<li><p><strong>Vector</strong></p>
<ol>
<li><p>底层为对象数组</p>
<p><code>protected Object[] elementData;</code></p>
</li>
<li><p><strong>线程安全</strong>(操作方法带有synchronized)</p>
</li>
<li><p>需要线程安全同步时使用</p>
</li>
<li><p><strong>底层机制源码分析</strong></p>
<ol>
<li>无参构造默认size &#x3D;&#x3D; 10，之后按2倍扩容</li>
<li>若指定大小构造，之后直接2倍扩容</li>
</ol>
</li>
</ol>
</li>
<li><p>……</p>
</li>
</ol>
</li>
<li><p>方法 -&gt; <em>操作元素</em></p>
<ol>
<li><p>void <strong>add</strong>(int <em>index</em>, Object <em>ele</em>)</p>
<p>在index位位置插入ele</p>
</li>
<li><p>boolean <strong>addAll</strong>(int <em>index</em>, Collection <em>eles</em>)</p>
<p>从index处开始将eles中的所有元素加入</p>
</li>
<li><p>Object <strong>get</strong>(int <em>index</em>)</p>
<p>获取index处的元素</p>
</li>
<li><p>int <strong>indexOf</strong>(Object <em>obj</em>)</p>
<p>返回obj在集合中<strong>首</strong>次出现的位置</p>
</li>
<li><p>int <strong>lastIndexOf</strong>(Object <em>obj</em>)</p>
<p>返回obj在集合中<strong>末</strong>次出现的位置</p>
</li>
<li><p>Object <strong>remove</strong>(int <em>index</em>)</p>
<p>移除index位置的元素，返回此元素</p>
</li>
<li><p>Object <strong>set</strong>(int <em>index</em>, Object <em>ele</em>)</p>
<p>设置指定index位置的元素为ele(替换)</p>
</li>
<li><p>List <strong>subList</strong>(int <em>fromIndex</em>, int <em>toIndex</em>)</p>
<p>返回从fromIndex到toIndex位置(左闭右开)的字集合</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>Set</strong>子接口</p>
<ol>
<li><p>特性：</p>
<ol>
<li>无序，无索引</li>
<li>无重复</li>
</ol>
</li>
<li><p>实现类：</p>
<ol>
<li><p><strong>HashSet</strong></p>
<ol>
<li><p><strong>底层机制源码分析</strong></p>
<img src="/2024/02/14/JavaSE/image-20230905191423649.png" class title="image-20230905191423649">

<ol>
<li><p>HashSet  底层是 HashMap</p>
<p>HashMap底层是 <strong>数组 + 链表 + 红黑树</strong></p>
<p><code>new HashMap&lt;&gt;();</code></p>
</li>
<li><p>添加一个元素时，先通过<strong>hash</strong>得到hash值，后转化为索引值</p>
<ol>
<li><p><code>add();</code></p>
</li>
<li><p><code>put();</code></p>
<p>该方法会调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : </span><br><span class="line">    ( h = key.hashCode() ) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>找到存储数据表table，看这个索引位置是否已经存放有元素</p>
</li>
<li><p>若无，直接加入</p>
</li>
<li><p>若有，调用<strong>equals</strong>比较</p>
<ol>
<li>同则放弃添加</li>
<li>异则添加</li>
</ol>
</li>
<li><p>jdk8中，若一链表元素个数达TREEIFY_THRESHOLD( &#x3D;&#x3D; 8)，且table &gt;&#x3D; MIN_TREEIFY_CAPACITY( &#x3D;&#x3D; 64)，就会进行树化(红黑树)</p>
</li>
</ol>
</li>
<li><p><strong>LinkedHashSet</strong> -&gt; <em>HashSet的子类</em></p>
<ol>
<li>LinkedHashSet 底层是LinkedHashMap，底层维护了一个  <strong>数组 + 双向链表</strong></li>
<li>LinkedHashSet根据hashCode来决定存储位置，用链表维护元素的次序(图)，<strong>使元素看起来是以插入顺序保存的</strong></li>
<li>不能添加重复元素</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>TreeSet</strong> -&gt; <em>可排序</em></p>
<ol>
<li>提供一个构造器，可以传入比较器</li>
</ol>
</li>
<li><p>……</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><em>&lt; ctrl+j -&gt; 列出目前所有缩略指令 &gt;</em></p>
<h2 id="Map-双列集合接口-存放-K-key-V-value-映射关系数据"><a href="#Map-双列集合接口-存放-K-key-V-value-映射关系数据" class="headerlink" title="Map -&gt; 双列集合接口 -&gt; 存放 K(key)-V(value) 映射关系数据"></a>Map -&gt; 双列集合接口 -&gt; 存放 K(key)-V(value) 映射关系数据</h2><p><em>下图重点：</em></p>
<img src="/2024/02/14/JavaSE/image-20230903105605983.png" class title="image-20230903105605983">

<ol>
<li><p>实现类的特点：</p>
<ol>
<li>Map中的key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中，同时还有一个entry集合指向Node，一对k-v对应一个entry元素，entry中也可以通过getKey()和getValue()单独取出只含key的集合set或只含value的集合collection</li>
<li><strong>key</strong> <strong>不</strong>允许重复(原因同HashSet，若为相同的key赋不同的value，则会使对应key的value值更新)</li>
<li><strong>value</strong> 可以重复</li>
<li>常用String类作为Map的key</li>
<li>key与value之间存在单向一对一关系(通过指定key总能找到对应的value)</li>
</ol>
</li>
<li><p>实现类：</p>
<ol>
<li><p><strong>HashMap</strong></p>
</li>
<li><p><strong>HashTable</strong></p>
<ol>
<li>存放键值对</li>
<li>键值皆<strong>不</strong>能为null</li>
<li>HashTable 使用方法基本上和HashMap一样</li>
<li>HashTable 是<strong>线程安全</strong>的，HashMap 是线程不安全的</li>
</ol>
</li>
<li><p><strong>TreeMap</strong> -&gt; <em>可排序</em></p>
</li>
<li><p><strong>Properties</strong></p>
<ol>
<li>Properties继承自HashTable且实现了Map接口，也是一种键值对的形式来保存数据</li>
<li>使用特点和HashTable类似</li>
<li>Properties还可以用于从xxx.properties文件中 加载数据到Properties类对象，并进行读取和修改</li>
<li>说明：工作后 xxx.properties 文件通常作为配置文件</li>
</ol>
</li>
</ol>
</li>
<li><p>常用方法：</p>
<ol>
<li>put() -&gt; <em>向表中添加 k-v对</em></li>
<li>remove() -&gt; <em>根据键删除映射关系</em></li>
<li>get() -&gt; <em>根据key获取value</em></li>
<li>size()</li>
<li>isEmpty()</li>
<li>clear() -&gt; <em>键值对全部清空</em></li>
<li>containsKey() -&gt; <em>查找键是否存在</em></li>
</ol>
</li>
<li><p>遍历方法：</p>
<ol>
<li><p>增强for</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object key : keyset) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>迭代器</p>
<ol>
<li><p>entrySet的迭代器返回的是HashMap$Node -实现-&gt; Map.Entry，转成此后调用其中的getKey()和getValue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">    System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>EntrySet来获取k-v</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">    System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="集合选型-取决于业务操作特点"><a href="#集合选型-取决于业务操作特点" class="headerlink" title="集合选型 -&gt; 取决于业务操作特点"></a>集合选型 -&gt; <em>取决于业务操作特点</em></h2><ol>
<li>先判断存储类型(一组对象 或 一组键值对)</li>
<li>一组对象：   <strong>Collection</strong><ol>
<li>允许重复：    <strong>List</strong><ol>
<li>增删多：<strong>LinkedList</strong> (底层维护了一个双向链表)</li>
<li>改查多：<strong>ArrayList</strong> (底层维护了一个Object类型的可变数组)</li>
</ol>
</li>
<li>不允许重复：<strong>Set</strong><ol>
<li>无序：    <strong>HashSet</strong> (底层是HashMap，维护了一个哈希表，即 数组+链表+红黑树)</li>
<li>排序：    <strong>TreeSet</strong></li>
<li>插入取出顺序一致：<strong>LinkedHashSet</strong> (维护了数组+双向链表)</li>
</ol>
</li>
</ol>
</li>
<li>一组键值对：<strong>Map</strong><ol>
<li>键无序： <strong>HashMap</strong> (底层是哈希表：jdk7 &#x3D; 数组+链表，jdk8 &#x3D; 数组+链表+红黑树)</li>
<li>键排序： <strong>TreeMap</strong></li>
<li>键插入取出顺序一致：<strong>LinkedHashMap</strong></li>
<li>读取文件： <strong>Properties</strong></li>
</ol>
</li>
</ol>
<h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ol>
<li>介绍：<ol>
<li>Collections 是一个<strong>操作 Set, List 和 Map</strong> 等集合的工具类</li>
<li>Collections 中提供了一系列<strong>静态的方法</strong>对集合元素进行排序、查询和修改等操作</li>
</ol>
</li>
<li>排序操作：(均为static方法)<ol>
<li>reverse(List)：反转List中元素的顺序</li>
<li>shuffle(List)：根据元素的自然顺序对指定的List集合元素按升序排序</li>
<li>sort(List)：根据 元素的自然顺序对指定List集合元素按升序排序</li>
<li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合元素进行排序</li>
<li>swap(List, int, int)：将指定List集合中的i元素与j元素进行交换</li>
<li>max(List)</li>
<li>max(List, Comparator)</li>
<li>min(List)</li>
<li>min(List, Comparator)</li>
<li>frequency(Collection, Object) -&gt; <em>返回指定集合中指定元素的出现次数</em></li>
<li>copy(List dest, List src) -&gt; <em>将src中的内容复制到dest中</em></li>
<li>replaceAll(List list, Object oldVal, Object newVal) -&gt; <em>使用新值替换List对象的所有旧值</em></li>
</ol>
</li>
</ol>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ol>
<li><p>好处：</p>
<ol>
<li>编译时检查添加元素类型，提高了安全性</li>
<li>减少了类型转换次数，提高了效率</li>
</ol>
</li>
<li><p>介绍：</p>
<ol>
<li><p>泛型又称参数化类型，是jdk5.0出现的新特性，解决数据类型的安全性问题</p>
</li>
<li><p>在类声明或实例化时只要指定好需要的具体类型即可</p>
</li>
<li><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时代码更简洁，健壮</p>
</li>
<li><p>可以在类声明时通过一个标识表示类中 某个<strong>属性</strong>的类型 或 某个<strong>方法</strong>的返回值类型 或 <strong>参数</strong>类型</p>
</li>
</ol>
</li>
<li><p>注意事项&amp;细节：</p>
<ol>
<li>给泛型指定数据类型时，要求是引用类型，不能是基本数据类型</li>
<li>在指定泛型具体类型后，可以传入该类型或者其子类类型</li>
<li>若不明确指定则默认为<E>，即Object</E></li>
</ol>
</li>
</ol>
<h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><ol>
<li>注意细节：<ol>
<li>普通成员可以使用泛型(属性，方法)</li>
<li>使用泛型的 数组，不能初始化</li>
<li>静态方法中不能使用类的泛型</li>
<li>泛型类的类型，是在创建对象时确定的，如未确定则默认为Object</li>
</ol>
</li>
</ol>
<h2 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h2><ol>
<li>注意细节：<ol>
<li>静态成员不能使用泛型</li>
<li>泛型接口的类型，在 继承接口 或 实现接口 时确定，如未确定则默认为Object</li>
</ol>
</li>
</ol>
<h2 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h2><ol>
<li>注意细节：<ol>
<li>泛型方法，可以定义在普通类中，也可以定义在泛型类中</li>
<li>当泛型方法被调用时，类型会确定</li>
<li>public void eat(E e) {}，修饰符后没有&lt;T, R…&gt;，该方法不是泛型方法，而是使用了泛型</li>
</ol>
</li>
</ol>
<h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><ol>
<li>泛型不具备继承性</li>
<li><?> -> *支持任意泛型类型*</li>
<li><? extends A> -> *支持A类以及A类的子类，规定了泛型的上限*</li>
<li><? super A> -> *支持A类以及A类的父类，不限于直接父类，规定了泛型的下限*</li>
</ol>
<h2 id="JUnit-Java语言单元测试框架"><a href="#JUnit-Java语言单元测试框架" class="headerlink" title="JUnit -&gt; Java语言单元测试框架"></a>JUnit -&gt; <em>Java语言单元测试框架</em></h2><p>用@Test</p>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程的基本使用"><a href="#线程的基本使用" class="headerlink" title="线程的基本使用"></a>线程的基本使用</h2><p>(ctrl+alt+t -&gt; <em>提示快捷键</em>)</p>
<ol>
<li>创建线程的两种方式<ol>
<li>继承Thread类，重写run方法，调用start()启动线程</li>
<li>实现Runnable接口，重写run方法，通过new一个Thread(对象)后调用该对象的start()启动线程(使用了<strong>代理模式</strong>)</li>
</ol>
</li>
</ol>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol>
<li><p>setName() -&gt; <em>设置线程名称，使之与参数name相同</em></p>
</li>
<li><p>getName() -&gt; <em>返回该线程的名称</em></p>
</li>
<li><p>start() -&gt; <em>使该线程开始执行，Java虚拟机底层调用该线程的start0方法</em></p>
</li>
<li><p>run() -&gt; <em>调用线程对象run方法</em></p>
</li>
<li><p>setPriority() -&gt; <em>更改线程的优先级</em></p>
</li>
<li><p>getPriority() -&gt; <em>获取线程的优先级</em></p>
</li>
<li><p>sleep() -&gt; <em>在指定毫秒数内让当前正在执行的线程休眠(暂停执行)</em></p>
</li>
<li><p>interrupt() -&gt; <em>中断线程</em></p>
</li>
<li><p>yield() -&gt; <em>(调自身的静态方法)线程的礼让。让出cpu，让其它线程执行，但礼让的时间不确定，所以也不一定礼让成功</em></p>
</li>
<li><p>join() -&gt; <em>(调对方的方法)线程的插队。一旦插队成功，则肯定先执行完插入的线程所有的任务</em></p>
<p><strong>注意细节&amp;细节</strong>：</p>
<ol>
<li>start底层会创建新的线程，调用run，run就是一个简单的方法调用，不会启动新线程</li>
<li>线程优先级的范围</li>
<li>interrupt，中断线程，但并没有真正地结束线程。所以一般用于中断正在休眠的线程</li>
<li>sleep，线程的静态方法，使当前线程休眠</li>
</ol>
</li>
</ol>
<h2 id="用户线程-和-守护线程"><a href="#用户线程-和-守护线程" class="headerlink" title="用户线程 和 守护线程"></a>用户线程 和 守护线程</h2><ol>
<li><p>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</p>
</li>
<li><p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</p>
<p>设置方法：<code>线程对象.setDaemon(true);</code></p>
</li>
<li><p>常见的守护线程：垃圾回收机制</p>
</li>
</ol>
<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>线程状态：</p>
<ol>
<li>NEW -&gt; <em>尚未启动的线程处于此状态</em></li>
<li>RUNNABLE -&gt; <em><strong>在Java虚拟机中执行</strong>的线程处于此状态</em></li>
<li>BLOCKED -&gt; <em><strong>被阻塞等待监视器锁定</strong>的线程处于此状态</em></li>
<li>WAITING -&gt; <em><strong>正在等待另一个线程执行特定动作</strong>的线程处于此状态</em></li>
<li>TIMED_WAITING -&gt; <em><strong>正在等待另一个线程执行动作 达到指定等待时间</strong>的线程处于此状态</em></li>
<li>TERMINATED -&gt; <em><strong>已退出</strong>的线程处于此状态</em></li>
</ol>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><em>保证数据在任何同一时刻 最多有一个线程访问，以保证数据的完整性</em></p>
<p>同步方法：Synchronized</p>
<ol>
<li><p>同步代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123; <span class="comment">// 得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>修饰方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ol>
<li><p>基本介绍</p>
<ol>
<li>Java语言中，引入对象互斥锁的概念，来保证共享数据操作的完整性</li>
<li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li>
<li>关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问</li>
<li>同步的局限性：导致程序的执行效率降低</li>
<li>同步方法(非静态)的锁可以是this，也可以是其他对象(要求是同一个对象)</li>
<li>同步方法(静态)的锁为当前类本身</li>
</ol>
</li>
<li><p>注意事项&amp;细节：</p>
<ol>
<li><p>同步方法如果没有使用static修饰，默认锁对象为this</p>
</li>
<li><p>如果方法使用static修饰，默认锁对象为当前类.class</p>
</li>
<li><p>实现的落地步骤：</p>
<ol>
<li>需先分析上锁的代码</li>
<li>选择同步代码块(尽量)或同步方法</li>
<li>要求多个线程的锁对象为同一个即可</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p><em>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁，在编程中是一定要避免死锁的发生</em></p>
<h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><ol>
<li>常见情况：<ol>
<li>当前线程的 同步方法、同步代码块 执行结束</li>
<li>当前线程 在同步代码块、同步方法 中遇到break、return</li>
<li>当前线程 在同步代码块、同步方法 中出现了未处理的Error或Exception，导致异常结束</li>
<li>当前线程 在同步代码块、同步方法 中执行了线程对象的wait()方法，当前线程暂停，并释放锁</li>
</ol>
</li>
</ol>
<h1 id="文件-IO"><a href="#文件-IO" class="headerlink" title="文件 IO"></a>文件 IO</h1><h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><p>​		文件在程序中是以 <strong>流</strong> 的形式来操作的</p>
<h2 id="常用文件操作"><a href="#常用文件操作" class="headerlink" title="常用文件操作"></a>常用文件操作</h2><h3 id="创建文件对象相关-构造器-和-方法"><a href="#创建文件对象相关-构造器-和-方法" class="headerlink" title="创建文件对象相关 构造器 和 方法"></a>创建文件对象相关 构造器 和 方法</h3><ol>
<li><p>构造器（在<strong>内存</strong>中创建）</p>
<ol>
<li><p><code>new File(String pathname) //根据路径构建一个File对象</code></p>
<p>串</p>
</li>
<li><p><code>new File(File parent, String child) //根据父目录文件 + 子路径构建</code></p>
<p>文件对象 + 串</p>
</li>
<li><p><code>new File(String parent, String child) //根据父目录+子路径构建</code></p>
<p>串 + 串</p>
</li>
</ol>
</li>
<li><p>相关方法</p>
<p>createNewFile() -&gt; <em>将new至内存中的文件对象加载到<strong>硬盘</strong>中</em></p>
</li>
</ol>
<h3 id="获取文件的相关信息"><a href="#获取文件的相关信息" class="headerlink" title="获取文件的相关信息"></a>获取文件的相关信息</h3><ol>
<li>getName() -&gt; <em>得到文件名</em></li>
<li>getAbsolutePath() -&gt; <em>绝对路径</em></li>
<li>getParent() -&gt; <em>父级目录</em></li>
<li>length() -&gt; <em>文件大小(字节)</em></li>
<li>exists() -&gt; *是否存 *</li>
<li>isFile()</li>
<li>isDirectory()</li>
</ol>
<h3 id="目录的操作和文件删除"><a href="#目录的操作和文件删除" class="headerlink" title="目录的操作和文件删除"></a>目录的操作和文件删除</h3><ol>
<li>mkdir() -&gt; <em>创建一级目录</em></li>
<li>mkdirs() -&gt; <em>创建多级目录</em></li>
<li>delete() -&gt; <em>删除空目录或文件</em></li>
</ol>
<h2 id="流的原理及流的分类"><a href="#流的原理及流的分类" class="headerlink" title="流的原理及流的分类"></a>流的原理及流的分类</h2><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><ol>
<li>按操作数据<strong>单位不同</strong>分为：字节流(8 bit)二进制文件，字符流(按字符)文本文件</li>
<li>按数据流的<strong>流向不同</strong>分为：输入流，输出流</li>
<li>按数据流的<strong>角色不同</strong>分为：节点流，处理流&#x2F;包装流</li>
</ol>
<table>
<thead>
<tr>
<th align="center">（<strong>抽象</strong>基类）</th>
<th align="center">字节流</th>
<th align="center">字符流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">输入流</td>
<td align="center">InputStream</td>
<td align="center">Reader</td>
</tr>
<tr>
<td align="center">输出流</td>
<td align="center">OutputStream</td>
<td align="center">Writer</td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生的</li>
<li>由这4个类派生出来的子类名称都是以其父类名作为子类名后缀</li>
</ol>
</blockquote>
<h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><h3 id="InputStream-abstract-class"><a href="#InputStream-abstract-class" class="headerlink" title="InputStream(abstract class)"></a>InputStream(abstract class)</h3><img src="/2024/02/14/JavaSE/image-20231112164936742.png" class title="image-20231112164936742">

<ol>
<li><p>FileInputStream -&gt; <em>文件输入流</em></p>
<blockquote>
<p>文件完成读取后要关闭以释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:/hello.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流对象</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器</span></span><br><span class="line"><span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inputFilePath);</span><br><span class="line">    <span class="keyword">while</span> ((readLen = fileInputStream.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, readLen));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>BufferedInputStream -&gt; <em>缓冲字节输入流</em></p>
</li>
<li><p>ObjectInputStream -&gt; <em>对象字节输入流</em></p>
</li>
</ol>
<h3 id="Reader-abstract-class"><a href="#Reader-abstract-class" class="headerlink" title="Reader(abstract class)"></a>Reader(abstract class)</h3><ol>
<li>(InputStreamReader-&gt;)FileReader<ol>
<li>相关方法</li>
</ol>
</li>
<li>BufferedReader</li>
<li>InputStreamReader</li>
</ol>
<h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><h3 id="OutputStream-abstract-class"><a href="#OutputStream-abstract-class" class="headerlink" title="OutputStream(abstract class)"></a>OutputStream(abstract class)</h3><ol>
<li><p>FileOutputStream -&gt; <em>文件输出流</em></p>
<blockquote>
<p>在写入时若目标文件不存在则会创建文件(前提是目录已存在)</p>
</blockquote>
</li>
<li><p>BufferedOutputStream</p>
</li>
<li><p>ObjectOutputStream</p>
</li>
</ol>
<h3 id="Writer-abstract-class"><a href="#Writer-abstract-class" class="headerlink" title="Writer(abstract class)"></a>Writer(abstract class)</h3><ol>
<li><p>(OutputStreamWriter-&gt;)FileWriter</p>
<blockquote>
<p>FileWriter使用后，必须要关闭(close)或刷新(flush)，否则写入不到指定的文件</p>
</blockquote>
</li>
<li><p>BufferedWriter</p>
</li>
<li><p>OutputStreamWriter</p>
</li>
</ol>
<h2 id="节点流-处理流"><a href="#节点流-处理流" class="headerlink" title="节点流 &amp; 处理流"></a>节点流 &amp; 处理流</h2><h3 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h3><p>节点流可以 从一个特定的数据源 读写数据，如FileReader, FileWriter</p>
<h3 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h3><p>处理流（也叫包装流）是<strong>连接</strong>在已存在的流（节点流或处理流之上）为程序提供更为强大的读写功能，如BufferedReader, BufferedWriter。关闭时<strong>只需关闭外层流即可</strong>（底层会自动关闭所包装的节点流）。</p>
<ol>
<li>BufferedReader(字符流) &amp; BufferedWriter(字符流)</li>
<li>BufferedInputStream(字节流) &amp; BufferedOutputStream(字节流)</li>
</ol>
<blockquote>
<p>节点流与处理流的区别与联系</p>
<ol>
<li>节点流是底层流&#x2F;低级流，直接与数据源相接</li>
<li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li>
<li>处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li>
</ol>
</blockquote>
<blockquote>
<p>处理流的功能主要体现在以下两个方面</p>
<ol>
<li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li>
<li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便</li>
</ol>
</blockquote>
<h2 id="对象处理流"><a href="#对象处理流" class="headerlink" title="对象处理流"></a>对象处理流</h2><h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h2><h3 id="System-in-标准输入（默认键盘）"><a href="#System-in-标准输入（默认键盘）" class="headerlink" title="System.in -&gt; 标准输入（默认键盘）"></a>System.in -&gt; <em>标准输入</em>（默认键盘）</h3><ol>
<li>编译类型 -&gt; InputStream</li>
<li>运行类型 -&gt; BufferedInputStream</li>
</ol>
<h3 id="System-out-标准输出（默认显示器）"><a href="#System-out-标准输出（默认显示器）" class="headerlink" title="System.out -&gt; 标准输出（默认显示器）"></a>System.out -&gt; <em>标准输出</em>（默认显示器）</h3><ol>
<li>编译类型 -&gt; PrintStream</li>
<li>运行类型 -&gt; PrintStream</li>
</ol>
<h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ol>
<li><p>OutputStreamReader(将文件流按格式读取)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换流转换</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="comment">// 包装流包装</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br></pre></td></tr></table></figure>
</li>
<li><p>OutputStreamWriter(将文件流按格式保存)</p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">osw.write(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure>

<h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h3><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><h2 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h2><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><ol>
<li>概念：两台设备之间通过网络实现数据传输</li>
<li>网络通信：将数据通过网络从一台设备传输到另一台设备</li>
<li>java.net 包下提供了一系列 类&amp;接口</li>
</ol>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ol>
<li>概念</li>
<li>分类<ol>
<li>局域网</li>
<li>城域网</li>
<li>广域网</li>
</ol>
</li>
</ol>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h3 id="域名-端口"><a href="#域名-端口" class="headerlink" title="域名 &amp; 端口"></a>域名 &amp; 端口</h3><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP &amp; UDP"></a>TCP &amp; UDP</h3><ol>
<li>TCP协议：<ol>
<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>
<li>传输前，采用“三次握手”方式，是<strong>可靠的</strong></li>
<li>TCP协议进行通信的两个应用进程：客户端、服务端</li>
<li>在连接中可进行大数据量的传输</li>
<li>传输完毕，需释放已建立的连接，<strong>效率低</strong></li>
</ol>
</li>
<li>UDP协议：<ol>
<li>将数据、源、目的封装成数据包，不需要建立连接</li>
<li>每个数据报的大小限制在64K内</li>
<li>因无需连接，故是<strong>不可靠的</strong></li>
<li>发送数据结束时无需释放资源（因为不是面向连接的），速度快</li>
</ol>
</li>
</ol>
<h2 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h2><ol>
<li>相关方法：<ol>
<li>getLocalHost() -&gt; <em>获取本机的InetAddress对象</em></li>
<li>getByName() -&gt; <em>根据指定主机名&#x2F;域名获取ip地址对象</em></li>
<li>getHostName() -&gt; <em>获取InetAddress对象的主机名</em></li>
<li>getHostAddress() -&gt; <em>获取InetAddress对象的地址</em></li>
</ol>
</li>
</ol>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol>
<li>套接字（Socket）开发应用程序被广泛使用，以至于成为事实上的标准</li>
<li>通信的两端都要有Socket，是两台机器间通信的端点</li>
<li>网络通信其实就是Socket间的通信</li>
<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输</li>
<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li>
</ol>
<img src="/2024/02/14/JavaSE/image-20231115180315937.png" class title="image-20231115180315937">

<h2 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h2><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ol>
<li>netstat -an -&gt; <em>可以查看当前主机的网络情况，包括<strong>端口监听</strong>情况和<strong>网络连接</strong>情况</em></li>
<li>netstat -an | more -&gt; <em>可以分页显示</em></li>
</ol>
<h2 id="UDP编程（了解）"><a href="#UDP编程（了解）" class="headerlink" title="UDP编程（了解）"></a>UDP编程（了解）</h2><ol>
<li>核心的两个类&#x2F;对象 DatagramSocket &amp; DatagramPack</li>
</ol>
<h2 id="项目2-多用户通信系统"><a href="#项目2-多用户通信系统" class="headerlink" title="[项目2]多用户通信系统"></a>[项目2]多用户通信系统</h2><p><a href="https://github.com/kkyesyes/Multi-userCommunicationSystem-Client">客户端代码Repo</a></p>
<p><a href="https://github.com/kkyesyes/Multi-userCommunicationSystem-Server">服务端代码Repo</a></p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol>
<li>用户登录</li>
<li>拉取在线用户列表</li>
<li>无异常退出（客户端、服务端）</li>
<li>私聊</li>
<li>群聊</li>
<li>发文件</li>
<li>服务器推送新闻</li>
</ol>
<h3 id="功能实现（细节盘点）"><a href="#功能实现（细节盘点）" class="headerlink" title="功能实现（细节盘点）"></a>功能实现（细节盘点）</h3><ol>
<li><p>用户登录</p>
<ol>
<li><p>传输User对象和Message对象进行通信</p>
</li>
<li><p>Message类型采用接口</p>
</li>
<li><p>为每一个客户端登录请求建立一个socket线程，加入至线程管理集合</p>
</li>
<li><p>ConcurrentHashMap（支持多线程）代替数据库，静态代码块初始化</p>
</li>
<li><p>单点登录：同一个ID只允许建立一个socket</p>
</li>
</ol>
</li>
<li><p>拉取在线用户列表</p>
<ol>
<li>每当用户登录就启动一个线程，并且加入至<strong>管理线程类</strong>中</li>
<li>当用户想要拉取时，遍历管理线程类中的用户并返回</li>
</ol>
</li>
<li><p>无异常退出</p>
<ol>
<li>客户端发送退出消息至服务端后，客户端结束通信线程</li>
<li>服务端收到客户端退出消息后，将线程结束并从线程管理集合中移除</li>
</ol>
</li>
<li><p>私聊</p>
<ol>
<li>服务端收到私聊消息后选择对应用户，将线程取出后执行消息转发</li>
</ol>
</li>
<li><p>群发</p>
<ol>
<li>服务端收到群发消息后遍历在线用户后，逐个取出线程执行消息转发</li>
</ol>
</li>
<li><p>发送文件</p>
<ol>
<li>NPE异常(解决中) &#x2F;&#x2F;todo</li>
</ol>
</li>
</ol>
<h3 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h3><ol>
<li>涉及技术点<ol>
<li>项目框架设计</li>
<li>Java面向对象</li>
<li>网络编程</li>
<li>多线程</li>
<li>IO流</li>
<li>内存数据库(HashSet)</li>
</ol>
</li>
<li>项目开发流程<ol>
<li>需求分析</li>
<li>设计</li>
<li>实现</li>
<li>测试</li>
<li>实施</li>
<li>维护</li>
</ol>
</li>
</ol>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><ol>
<li>反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息（如成员变量，构造器，成员方法等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到</li>
<li>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，故谓之“反射”</li>
</ol>
<h2 id="Java-反射机制原理示意图"><a href="#Java-反射机制原理示意图" class="headerlink" title="Java 反射机制原理示意图"></a>Java 反射机制原理示意图</h2><img src="/2024/02/14/JavaSE/image-20231201233236918.png" class title="image-20231201233236918">

<h2 id="Java-反射机制可以完成"><a href="#Java-反射机制可以完成" class="headerlink" title="Java 反射机制可以完成"></a>Java 反射机制可以完成</h2><ol>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时得到任意一个类所具有的成员变量和方法</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>生成动态代理</li>
</ol>
<h2 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h2><ol>
<li>java.lang.Class：代表一个类，Class对象表示某个类加载后在堆中的对象</li>
<li>java.lang.reflect.Method：代表类的方法，Method对象表示某个类的方法</li>
<li>java.lang.reflect.Field：代表类的成员变量，Field对象表示某个类的成员变量</li>
<li>java.lang.reflect.Constructor：代表类的构造方法，Constructor表示构造器</li>
</ol>
<h2 id="反射的优点和缺点"><a href="#反射的优点和缺点" class="headerlink" title="反射的优点和缺点"></a>反射的优点和缺点</h2><ol>
<li>优点：可以动态地创建和使用对象（框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑</li>
<li>缺点：使用反射基本是解释执行，对执行速度有影响</li>
</ol>
<h2 id="反射调用优化（关闭访问检查）"><a href="#反射调用优化（关闭访问检查）" class="headerlink" title="反射调用优化（关闭访问检查）"></a>反射调用优化（关闭访问检查）</h2><ol>
<li>Method和Field、Constructor对象都有setAccessible()方法</li>
<li>setAccessible()方法作用是 启动 和 禁止 访问安全检查</li>
<li>setAccessible()参数为 true，取消反射检查，提高访问效率；false，执行反射检查</li>
</ol>
<h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li><p>Class也是类，因此也是继承Object类</p>
<img src="/2024/02/14/JavaSE/image-20231202152512247.png" class title="image-20231202152512247">
</li>
<li><p>Class类对象不是new出来的，而是系统创建的</p>
</li>
<li><p>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</p>
</li>
<li><p>每个类的实例都会记得自己是由哪个Class类实例所生成</p>
</li>
<li><p>通过Class可以完整地得到一个在的完整结构，通过一系列API</p>
</li>
<li><p>Class对象是存放在堆的</p>
</li>
<li><p>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据（包括 方法代码，变量名，方法名，访问权限等等）</p>
</li>
</ol>
<h3 id="Class-类常用方法"><a href="#Class-类常用方法" class="headerlink" title="Class 类常用方法"></a>Class 类常用方法</h3><h3 id="得到类的多种方式"><a href="#得到类的多种方式" class="headerlink" title="得到类的多种方式"></a>得到类的多种方式</h3><img src="/2024/02/14/JavaSE/image-20231202182628389.png" class title="image-20231202182628389">

<ol>
<li><p>Class.forName() -&gt; <em>常用于配置文件的读取</em></p>
</li>
<li><p>类名.class -&gt; <em>应用于参数传递</em></p>
</li>
<li><p>对象.getClass() -&gt; <em>应用于有对象实例</em></p>
</li>
<li><p>通过类加载器(4种) 来获取类的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先得到类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// 通过类加载器得到Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> classLoader.loadClass(classAllPath);</span><br></pre></td></tr></table></figure>


</li>
<li><p>基本数据类型(int, char, …) 获取方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> 基本数据类型.class</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本数据类型对应的包装类 获取方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> 包装类.TYPE</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="含有Class对象的类"><a href="#含有Class对象的类" class="headerlink" title="含有Class对象的类"></a>含有Class对象的类</h2><ol>
<li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li>
<li>interface接口</li>
<li>数组</li>
<li>enum枚举</li>
<li>annotation注解</li>
<li>基本数据类型</li>
<li>void</li>
</ol>
<h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>反射机制是Java实现动态语言的关键，也就是通过反射实现类的动态加载</p>
<ol>
<li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li>
<li>动态加载：运行时加载需要的类，如果运行时不用该类，则不报错，降低了依赖性</li>
</ol>
<h3 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h3><ol>
<li>当创建对象时（new）（静态加载）</li>
<li>当子类被加载时 （静态加载）</li>
<li>调用类中的静态成员时 （静态加载）</li>
<li>通过反射（动态加载）</li>
</ol>
<h3 id="过程图示"><a href="#过程图示" class="headerlink" title="过程图示"></a>过程图示</h3><img src="/2024/02/14/JavaSE/image-20231202213923776.png" class title="image-20231202213923776">

<img src="/2024/02/14/JavaSE/image-20231202214305970.png" class title="image-20231202214305970">

<h3 id="加载各阶段"><a href="#加载各阶段" class="headerlink" title="加载各阶段"></a>加载各阶段</h3><ol>
<li><p>加载阶段</p>
<p>JVM在该阶段的主要目的是将字节码从不同的数据源（可能是class文件、也可能是jar包，甚至网络）转化为二进制字节流加载到内存中（方法区），并生成一个代表该类的java.lang.Class对象</p>
</li>
<li><p>连接阶段</p>
<ol>
<li>验证：<ol>
<li>目的是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li>
<li>包括：文件格式验证（是否以魔数 oxcafebabe开头）、元数据验证、字节码验证和符号引用验证</li>
<li>可以考虑使用 -Xverify:none 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li>
</ol>
</li>
<li>准备：<ol>
<li>JVM会在该阶段对 <strong>静态变量</strong> 分配内存并 <strong>默认初始化（对应数据类型的默认初始值，如0、0L、null、false等）</strong>。这些变量所使用的内存都将在方法区中进行分配</li>
</ol>
</li>
<li>解析：<ol>
<li>虚拟机将常量池内的符号引用替换为直接引用的过程</li>
</ol>
</li>
</ol>
</li>
<li><p>初始化</p>
<ol>
<li>到初始化阶段，才真正开始执行类中定义的Java程序代码，此阶段是执行<clinit>()方法的过程</clinit></li>
<li><clinit>()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有<strong>静态变量</strong>的赋值动作和静态代码块中的语句，并进行合并</clinit></li>
<li>虚拟机会保证一个类的<clinit>()方法在多线程的环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只有一个线程去执行这个类<clinit>()方法，其它线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕</clinit></clinit></clinit></li>
</ol>
</li>
</ol>
<h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><h3 id="类调用"><a href="#类调用" class="headerlink" title="类调用"></a>类调用</h3><ol>
<li>调用类中的public修饰的无参构造器</li>
<li>调用类中的指定构造器</li>
</ol>
<h3 id="Class类相关方法"><a href="#Class类相关方法" class="headerlink" title="Class类相关方法"></a>Class类相关方法</h3><ol>
<li>newInstance() -&gt; <em>调用类中的无参构造器，获取对应类的对象</em></li>
<li>getConstructor(Class…class对象) -&gt; <em>根据参数列表，获取对应的<strong>public</strong>构造器对象</em></li>
<li>getDeclaredConstructor(Class…class对象) -&gt; <em>根据参数列表，获取对应的<strong>所有</strong>构造器对象</em></li>
</ol>
<h3 id="Constructor类相关方法"><a href="#Constructor类相关方法" class="headerlink" title="Constructor类相关方法"></a>Constructor类相关方法</h3><ol>
<li>setAccessible() -&gt; <em>暴破</em></li>
<li>newInstance(Object…obj) -&gt; <em>调用构造器</em></li>
</ol>
<h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><ol>
<li><p>根据属性名获取Field对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> class对象.getDeclaredField(属性名);</span><br></pre></td></tr></table></figure>
</li>
<li><p>暴破</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.set(o, 值); <span class="comment">// o 表示对象</span></span><br><span class="line">System.out.println(f.get(o));</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是 静态属性，则set和get中的参数o，可以写成null</p>
</li>
</ol>
<h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><ol>
<li><p>根据方法名和参数列表获取Method方法对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> class对象.getDeclaredMethod(方法名, XX.class); <span class="comment">// 得到本类的所有方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> class对象.newInstance();</span><br></pre></td></tr></table></figure>
</li>
<li><p>暴破</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> m.invoke(o, 实参列表);</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：如果是静态方法，则invoke的参数o，可以写成null</p>
</li>
</ol>
<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><h2 id="安装-配置（MySQL5-7）"><a href="#安装-配置（MySQL5-7）" class="headerlink" title="安装 &amp; 配置（MySQL5.7）"></a>安装 &amp; 配置（MySQL5.7）</h2><h3 id="命令行窗口连接"><a href="#命令行窗口连接" class="headerlink" title="命令行窗口连接"></a>命令行窗口连接</h3><ol>
<li><p>mysql -h [hostname] -P [port] -u [username] -p [passwd]</p>
</li>
<li><p>登录前，保证服务启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql服务名</span><br><span class="line">net start mysql服务名</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="MySQL-三层结构"><a href="#MySQL-三层结构" class="headerlink" title="MySQL 三层结构"></a>MySQL 三层结构</h2><img src="/2024/02/14/JavaSE/image-20231203112126411.png" class title="image-20231203112126411">

<blockquote>
<p>表的本质是文件</p>
</blockquote>
<h2 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h2><ol>
<li>DDL：数据定义语句 [create 表，库…]</li>
<li>DML：数据操作语句 [增加 insert，修改 update，删除 delete]</li>
<li>DQL：数据查询语句 [select]</li>
<li>DCL：数据控制语句 [管理数据库：比如用户权限 grant revoke]</li>
</ol>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote>
<p>注：数据库可以指定 字符集 和 校对规则，<strong>表也可以</strong></p>
<p>创建 数据库、表 时为规避关键字，可以用反引号解决</p>
</blockquote>
<h3 id="查看、删除数据库"><a href="#查看、删除数据库" class="headerlink" title="查看、删除数据库"></a>查看、删除数据库</h3><ol>
<li>显示数据库：SHOW DATABASES</li>
<li>删除数据库：DROP DATABASE <em>db_name</em></li>
</ol>
<h3 id="备份、恢复数据库"><a href="#备份、恢复数据库" class="headerlink" title="备份、恢复数据库"></a>备份、恢复数据库</h3><ol>
<li>备份命令(DOS中执行)：mysqldump -u [username] -p -B [db0 db1 …] &gt; [filename].sql</li>
<li>恢复命令(在MySQL命令行中执行)：Source [filename].sql</li>
</ol>
<blockquote>
<p>备份库的表：mysqldump -u [username] -p [passwd] [db_name] [table_name0 table_name1 …] &gt; [filename].sql</p>
</blockquote>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><img src="/2024/02/14/JavaSE/image-20231203120005762.png" class title="image-20231203120005762">

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><img src="/2024/02/14/JavaSE/image-20231203120506326.png" class title="image-20231203120506326">

<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><img src="/2024/02/14/JavaSE/image-20231203122540250.png" class title="image-20231203122540250">

<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><img src="/2024/02/14/JavaSE/image-20231203122606245.png" class title="image-20231203122606245">

<img src="/2024/02/14/JavaSE/image-20231203122656153.png" class title="image-20231203122656153">

<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><img src="/2024/02/14/JavaSE/image-20231203122802242.png" class title="image-20231203122802242">

<img src="/2024/02/14/JavaSE/image-20231203122917677.png" class title="image-20231203122917677">

<h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><ol>
<li><p>单表查询</p>
<img src="/2024/02/14/JavaSE/image-20231203123023949.png" class title="image-20231203123023949">

<img src="/2024/02/14/JavaSE/image-20231203123037060.png" class title="image-20231203123037060">

<img src="/2024/02/14/JavaSE/image-20231203123157073.png" class title="image-20231203123157073">

<img src="/2024/02/14/JavaSE/image-20231203123211543.png" class title="image-20231203123211543">

<hr>
<ol>
<li><p>在 <strong>where</strong> 子句中经常使用的运算符</p>
<img src="/2024/02/14/JavaSE/image-20231203130024941.png" class title="image-20231203130024941">
</li>
<li><p>使用 <strong>order by</strong> 子句排序查询结果</p>
<img src="/2024/02/14/JavaSE/image-20231203130245382.png" class title="image-20231203130245382">
</li>
<li><p><strong>count函数</strong> 返回行的总数</p>
<img src="/2024/02/14/JavaSE/image-20231203130632209.png" class title="image-20231203130632209">

<blockquote>
<p>coutn(*) VS count(列)</p>
<ol>
<li>count(*) 返回满足条件的记录的行数</li>
<li>count(列) 返回满足条件的某列有多少个，但是会排除为null的情况</li>
</ol>
</blockquote>
</li>
<li><p><strong>sum函数</strong> 返回满足where条件的行的和（一般使用在数值列）</p>
<img src="/2024/02/14/JavaSE/image-20231203131323128.png" class title="image-20231203131323128">

<blockquote>
<p>注：sum仅对数值起作用，否则会报错。对多列求和，“，”不能少</p>
</blockquote>
</li>
<li><p><strong>avg函数</strong> 返回满足where条件的一列的 平均值</p>
<img src="/2024/02/14/JavaSE/image-20231203131741388.png" class title="image-20231203131741388">
</li>
<li><p><strong>max&#x2F;min函数</strong> 返回满足where条件的一列的最大&#x2F;最小值</p>
<img src="/2024/02/14/JavaSE/image-20231203131932399.png" class title="image-20231203131932399">
</li>
<li><p>使用 <strong>group by</strong> 子句对列进行分组</p>
<img src="/2024/02/14/JavaSE/image-20231203132134137.png" class title="image-20231203132134137">
</li>
<li><p>使用 <strong>having</strong> 子句对分组后的结果进行过滤</p>
<img src="/2024/02/14/JavaSE/image-20231203132210481.png" class title="image-20231203132210481"></li>
</ol>
</li>
<li><p>多表查询</p>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><p>如 select 单表查询所列函数</p>
<h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><img src="/2024/02/14/JavaSE/image-20231203140442458.png" class title="image-20231203140442458">

<img src="/2024/02/14/JavaSE/image-20231203141804869.png" class title="image-20231203141804869">

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><img src="/2024/02/14/JavaSE/image-20231203133809065.png" class title="image-20231203133809065">

<h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><img src="/2024/02/14/JavaSE/image-20231203135922028.png" class title="image-20231203135922028">

<h3 id="加密-系统-函数"><a href="#加密-系统-函数" class="headerlink" title="加密 &amp; 系统 函数"></a>加密 &amp; 系统 函数</h3><img src="/2024/02/14/JavaSE/image-20231203150656029.png" class title="image-20231203150656029">

<h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><img src="/2024/02/14/JavaSE/image-20231203151505580.png" class title="image-20231203151505580">

<h2 id="MySQL-表查询"><a href="#MySQL-表查询" class="headerlink" title="MySQL 表查询"></a>MySQL 表查询</h2><h3 id="加强"><a href="#加强" class="headerlink" title="加强"></a>加强</h3><ol>
<li><p>where 子句中：</p>
<ol>
<li><p>在MySQL中，日期类型可以直接比较（需要注意格式）</p>
<img src="/2024/02/14/JavaSE/image-20231204125350931.png" class title="image-20231204125350931">
</li>
<li><p>like 操作符（模糊查询）</p>
<ul>
<li><p>%：表示0到多个字符</p>
<img src="/2024/02/14/JavaSE/image-20231204125520055.png" class title="image-20231204125520055">
</li>
<li><p>_ ：表示单个字符</p>
<img src="/2024/02/14/JavaSE/image-20231204125643602.png" class title="image-20231204125643602"></li>
</ul>
</li>
<li><p>查询表结构</p>
<img src="/2024/02/14/JavaSE/image-20231204130215122.png" class title="image-20231204130215122"></li>
</ol>
</li>
<li><p>分页查询</p>
<img src="/2024/02/14/JavaSE/image-20231204131358384.png" class title="image-20231204131358384">
</li>
<li><p>group by 分组子句 与 分组函数 的 使用</p>
</li>
<li><p>数据分组总结</p>
<img src="/2024/02/14/JavaSE/image-20231204180717476.png" class title="image-20231204180717476"></li>
</ol>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ol>
<li><p>说明：</p>
<p>多表查询是指基于 两个或两个以上的表 查询。在实际应用中，查询单个表可能不能满足需求</p>
<blockquote>
<p>注：多表查询的条件 不能少于 表的个数-1，否则会出现<strong>笛卡尔积</strong>（多表数据根据笛卡尔积的运算法则进行拼接）</p>
</blockquote>
</li>
</ol>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul>
<li>自连接 -&gt; <em>指在同一张表的连接查询（将同一张表看做两张表）</em></li>
</ul>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ol>
<li><p>子查询 -&gt; <em>指嵌入在其它 SQL语句中的 select语句，也叫嵌套查询</em></p>
<img src="/2024/02/14/JavaSE/image-20231218182717484.png" class title="image-20231218182717484">
</li>
<li><p>单行子查询 -&gt; <em>指只返回一行数据的子查询语句</em></p>
</li>
<li><p>多行子查询 -&gt; <em>指返回多行数据的子查询，<strong>使用关键字 in</strong></em></p>
<img src="/2024/02/14/JavaSE/image-20231218185535558.png" class title="image-20231218185535558"></li>
</ol>
<blockquote>
<p>注：子查询可以当做临时表使用：</p>
<img src="/2024/02/14/JavaSE/image-20231219114904197.png" class title="image-20231219114904197">
</blockquote>
<ol start="4">
<li><p>多行子查询中使用 all &amp; any 操作符</p>
<ol>
<li><p>all：</p>
<img src="/2024/02/14/JavaSE/image-20231219120154514.png" class title="image-20231219120154514">
</li>
<li><p>any：</p>
<img src="/2024/02/14/JavaSE/image-20231219120410157.png" class title="image-20231219120410157"></li>
</ol>
</li>
<li><p>多列子查询 -&gt; <em>查询返回多个列数据的子查询语句</em></p>
<img src="/2024/02/14/JavaSE/image-20231221101113137.png" class title="image-20231221101113137">

<blockquote>
<p>（要查询的多个列） &#x3D; （子查询输出的多个列）</p>
</blockquote>
</li>
</ol>
<h3 id="表复制-去重"><a href="#表复制-去重" class="headerlink" title="表复制 &amp; 去重"></a>表复制 &amp; 去重</h3><ol>
<li><p>自我复制数据（蠕虫复制）-&gt; <em>为了对某个SQL语句进行效率测试，可以此为表创建海量数据</em></p>
<img src="/2024/02/14/JavaSE/image-20231221105658820.png" class title="image-20231221105658820">

<p>（表复制）</p>
<img src="/2024/02/14/JavaSE/image-20231221105743886.png" class title="image-20231221105743886">
</li>
<li><p>去重</p>
<img src="/2024/02/14/JavaSE/image-20231221110348470.png" class title="image-20231221110348470"></li>
</ol>
<h3 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h3><ul>
<li>有时在实际应用中，为了合并多个select语句的结果，可以使用集合操作符号union，union all</li>
</ul>
<ol>
<li><p>union all -&gt; <em>该操作符用于取得两个结果集的并集。当使用该操作符时，<strong>不会自动去掉重复行</strong></em></p>
<img src="/2024/02/14/JavaSE/image-20231221111641730.png" class title="image-20231221111641730">
</li>
<li><p>union -&gt; <em>该操作符与 union all 相似，但是<strong>会自动去掉结果中的重复行</strong></em></p>
<img src="/2024/02/14/JavaSE/image-20231221111710072.png" class title="image-20231221111710072"></li>
</ol>
<h2 id="MySQL-表外连接"><a href="#MySQL-表外连接" class="headerlink" title="MySQL 表外连接"></a>MySQL 表外连接</h2><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ol>
<li><p>左外连接 -&gt; <em>左侧的表完全显示</em></p>
<img src="/2024/02/14/JavaSE/image-20231221235608479.png" class title="image-20231221235608479">
</li>
<li><p>右外连接 -&gt; <em>右侧的表完全显示</em></p>
<img src="/2024/02/14/JavaSE/image-20231222000027077.png" class title="image-20231222000027077"></li>
</ol>
<h2 id="MySQL-约束"><a href="#MySQL-约束" class="headerlink" title="MySQL 约束"></a>MySQL 约束</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul>
<li><strong>约束</strong> -&gt; <em>用于确保数据库数据满足特定的商业规则</em>（包括：not null、unique、primary key、foreign key、check 五种）</li>
</ul>
<ol>
<li><p>primary key (主键)：不可重复且不能为null</p>
<blockquote>
<p>primary key (id, `name`, …) -&gt; <em>复合主键：其中多个内容不可都相同</em></p>
</blockquote>
<ol>
<li>主键的指定方式：<ol>
<li>直接在字段名后指定：字段名 primary key</li>
<li>在表定义最后写 primary key (column1, …);</li>
</ol>
</li>
<li>一张表只能有一个主键，但可以是复合主键</li>
<li>desc [table_name] 可以看到primary key的情况</li>
<li>实际开发中，每个表往往都会设计一个主键</li>
</ol>
</li>
<li><p>not null (非空)：数据不可为空</p>
<ol>
<li>指定方式：[field_name] [field_type] not null</li>
</ol>
</li>
<li><p>unique (唯一)：值不能重复</p>
<ol>
<li>指定方式：[field_name] [field_type] unique</li>
<li>细节（注）：<ol>
<li>若没有指定 not null，则unique字段可以有多个null</li>
<li>一张表可以有<strong>多个unique</strong>字段</li>
</ol>
</li>
</ol>
</li>
<li><p>foreign key (外键)：用于定义 主表 和 从表 之间的关系</p>
<ul>
<li><p>外键约束要定义在从表上，主表则必须具有主键约束或是unique约束。当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为null</p>
<img src="/2024/02/14/JavaSE/image-20231223171334145.png" class title="image-20231223171334145"></li>
</ul>
<ol>
<li>指定方式：foreign key [本表名] references [主表名(主键名或unique字段名)]</li>
<li>细节说明：<ol>
<li>外键指向的表的字段，要求是 primary key 或者是 unique</li>
<li>表的类型是 <strong>innodb</strong> 才支持外键</li>
<li>外键字段的类型要和主键字段的类型一致（长度可以不同）</li>
<li>外键字段的值，必须 <strong>在主键字段中出现过</strong> 或者为 <strong>null</strong> （前提是外键字段允许为 null）</li>
<li>一旦建立主外键关系，数据就不能随意删除了</li>
</ol>
</li>
</ol>
</li>
<li><p>check (检查)：用于<strong>强制 行数据 必须满足的条件</strong>，假定在 col 列上定义了 check 约束，并要求 col 列值在1000 ~ 2000之间，若不在1000 ~ 2000之间就会提示 出错</p>
<ul>
<li><p>Oracle 和 SQL server 均支持 check，但是 MySQL5.7 目前还不支持 check，只做语法校验，但不会生效。</p>
<blockquote>
<p>在 MySQL中实现 check 的功能，一般是在程序中控制，或者通过触发器完成</p>
</blockquote>
</li>
</ul>
<ol>
<li><p>基本语法：</p>
<img src="/2024/02/14/JavaSE/image-20231223173627639.png" class title="image-20231223173627639"></li>
</ol>
</li>
<li><p>MySQL 自增</p>
<ol>
<li><p>基本介绍：添加记录时实现从1开始 自动增长</p>
</li>
<li><p>基本语法：字段名 整型 primary key auto_increment</p>
</li>
<li><p>添加自增长的字段</p>
<img src="/2024/02/14/JavaSE/image-20231223175740612.png" class title="image-20231223175740612">
</li>
<li><p>使用细节</p>
<ol>
<li>一般来说自增长是和 primary key 配合使用的</li>
<li>自增长也可以单独使用 [但是需要配合一个 unique]</li>
<li>自增长修饰的字段为 整数型 的（虽然小数也可以但是非常少见）</li>
<li>自增长默认从 1 开始，也可以通过命令修改：<code>alter table [表名] auto_increment = [新的开始值];</code></li>
<li>如果在添加数据时为自增列指定值，则以指定值为准，之后从指定值起自增</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>通过建立索引可 提高查询速度</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>无索引时：每次查询要遍历整张表</li>
<li>有索引时：形成一个索引的数据结构，如二叉树</li>
</ol>
<h3 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h3><ol>
<li>磁盘占用</li>
<li>对 dml (update delete insert) 语句的效率有影响（维护索引开销）</li>
</ol>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ol>
<li><p>主键索引（primary） -&gt; <em>是主键，也是索引</em></p>
</li>
<li><p>唯一索引（unique） -&gt; <em>是唯一，也是索引</em></p>
</li>
<li><p>普通索引（index）</p>
</li>
<li><p>全文索引（fulltext）【适用于 MyISAM 引擎】</p>
<p>开发中，不考虑 MySQL 自带的，而是考虑使用：全文搜索 Solr 和 ElasticSearch（ES）框架</p>
</li>
</ol>
<h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><ol>
<li><p>添加索引</p>
<img src="/2024/02/14/JavaSE/image-20240116161118689.png" class title="image-20240116161118689">

<img src="/2024/02/14/JavaSE/image-20240116161135577.png" class title="image-20240116161135577">

<blockquote>
<p>如何选择：</p>
<ul>
<li>如果某列的值 是不会重复的，则优先考虑使用 unique 索引，否则使用普通索引</li>
</ul>
</blockquote>
</li>
<li><p>添加主键（索引）</p>
<p>建表时加 primary key 修饰</p>
<p>若建表时未添加，可用如下指令添加 <img src="/2024/02/14/JavaSE/image-20240116161948680.png" class title="image-20240116161948680"></p>
</li>
<li><p>删除索引</p>
<img src="/2024/02/14/JavaSE/image-20240116162126378.png" class title="image-20240116162126378">

<img src="/2024/02/14/JavaSE/image-20240116162146905.png" class title="image-20240116162146905">
</li>
<li><p>删除主键索引（比较特别）</p>
<img src="/2024/02/14/JavaSE/image-20240116162213310.png" class title="image-20240116162213310">
</li>
<li><p>修改索引 -&gt; <em>先删除再添加</em></p>
</li>
<li><p>查询索引（四种方式）</p>
<ol>
<li>show index from [table_name];</li>
<li>show indexes from [table_name];</li>
<li>show keys from [table_name];</li>
<li>desc [table_name];</li>
</ol>
</li>
</ol>
<h3 id="索引小结：哪些列上适合使用索引"><a href="#索引小结：哪些列上适合使用索引" class="headerlink" title="索引小结：哪些列上适合使用索引"></a>索引小结：哪些列上适合使用索引</h3><ol>
<li>较频繁地作为查询条件字段 <strong>适合</strong> 创建索引（如：雇员编号）</li>
<li>唯一性太差的字段 <strong>不适合</strong> 单独创建索引（如：性别）</li>
<li>更新非常频繁的字段 <strong>不适合</strong> 创建索引（如：登录次数）</li>
<li>不会出现在 where 子句中的字段 <strong>不适合</strong> 创建索引</li>
</ol>
<h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务用于保证数据的一致性，由 <strong>一组相关的 dml 语句组成</strong>，该组的 dml 语句要么全部成功，要么全部失败。如：转账用事务来处理，以保证数据一致性</p>
<h3 id="事务-锁"><a href="#事务-锁" class="headerlink" title="事务 &amp; 锁"></a>事务 &amp; 锁</h3><p>当执行事务操作时（dml 语句），MySQL 会在表上加锁，防止其它用户改表的数据（对用户来讲是非常重要的）</p>
<h3 id="MySQL-控制台事务操作"><a href="#MySQL-控制台事务操作" class="headerlink" title="MySQL 控制台事务操作"></a>MySQL 控制台事务操作</h3><img src="/2024/02/14/JavaSE/image-20240116170112150.png" class title="image-20240116170112150">

<img src="/2024/02/14/JavaSE/image-20240116165625287.png" class title="image-20240116165625287">

<ul>
<li><p>回退事务</p>
<img src="/2024/02/14/JavaSE/image-20240116165944106.png" class title="image-20240116165944106">
</li>
<li><p>提交事务</p>
<img src="/2024/02/14/JavaSE/image-20240116170008605.png" class title="image-20240116170008605"></li>
</ul>
<h3 id="事务细节讨论"><a href="#事务细节讨论" class="headerlink" title="事务细节讨论"></a>事务细节讨论</h3><img src="/2024/02/14/JavaSE/image-20240116170922958.png" class title="image-20240116170922958">

<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><ol>
<li><p>介绍</p>
<ul>
<li>事务与事务之间的隔离程度</li>
</ul>
<img src="/2024/02/14/JavaSE/image-20240116171132027.png" class title="image-20240116171132027">

<ol>
<li><strong>脏读</strong>（dirty read）-&gt; <em>当一个事务读取另一个事务时尚未提交时，产生脏读</em></li>
<li><strong>不可重复读</strong>（nonrepeatable read）-&gt; <em>同一查询在同一事务中多次进行，由于其它提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读</em></li>
<li><strong>幻读</strong>（phantom read）-&gt; <em>同一查询在同一事务中多次进行，由于其它提交事务所做的插入操作，每次返回不同的结果集，此时发生幻读</em></li>
</ol>
</li>
<li><p>MySQL 隔离级别</p>
<img src="/2024/02/14/JavaSE/image-20240117204058549.png" class title="image-20240117204058549">

<blockquote>
<p>MySQL InnoDB 引擎可重复读级别 通过 MVCC 机制解决了幻读问题</p>
</blockquote>
</li>
<li><p>MySQL 隔离级别的 设置 &amp; 修改</p>
<blockquote>
<p>默认隔离级别为 Repeatable read，可满足大部分项目要求（一般不作修改）</p>
</blockquote>
</li>
</ol>
<h3 id="ACID-特性"><a href="#ACID-特性" class="headerlink" title="ACID 特性"></a>ACID 特性</h3><ol>
<li><p><strong>原子性</strong>（Atomicity）</p>
<p>事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</p>
</li>
<li><p><strong>一致性</strong>（Consistency）</p>
<p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态</p>
</li>
<li><p><strong>隔离性</strong>（Isolation）</p>
<p>多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其它事务的操作数据所干扰，多个并发事务之间要相互隔离</p>
</li>
<li><p><strong>持久性</strong>（Durability）</p>
<p>一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p>
</li>
</ol>
<h2 id="MySQL-表类型-存储引擎"><a href="#MySQL-表类型-存储引擎" class="headerlink" title="MySQL 表类型 &amp; 存储引擎"></a>MySQL 表类型 &amp; 存储引擎</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>MySQL 的表类型由存储引擎（Storage Engines）决定，主要包括 MyISAM、innoDB、Memory 等</li>
<li>MySQL 数据表主要支持六种类型<ol>
<li><strong>事务安全型</strong>（Transaction-safe）<ul>
<li>InnoDB</li>
</ul>
</li>
<li><strong>非事务安全型</strong>（non-transaction-safe）<ul>
<li>CSV</li>
<li>MEMORY</li>
<li>ARCHIVE</li>
<li>MRG_MYISAM</li>
<li>MyISAM</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="主要的-存储引擎-表类型-特点"><a href="#主要的-存储引擎-表类型-特点" class="headerlink" title="主要的 存储引擎 &#x2F; 表类型 特点"></a>主要的 存储引擎 &#x2F; 表类型 特点</h3><img src="/2024/02/14/JavaSE/image-20240117220923975.png" class title="image-20240117220923975">

<h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><ol>
<li>MyISAM 不支持 事务 和 外键，但其访问速度快，对事务完整性没有要求</li>
<li>InnoDB 存储引擎提供了具有提交、回滚 和 崩溃恢复能力 的事务安全。但是比起 MyISAM 存储引擎，InnoDB 写的处理效率差一些，并且会占用更多的磁盘空间以保留 数据 和 索引</li>
<li>MEMORY 存储引擎使用存在内存中的内容来创建表。每个 MEMORY 表只实际对应一个磁盘文件。MEMORY 类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用 Hash 索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在</li>
</ol>
<h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><ol>
<li>如果应用不需要事务处理，处理的只是基本的 CRUD 操作，那么 MyISAM 是不二选择，速度快</li>
<li>如果需要支持事务，选择 InnoDB</li>
<li>MEMORY 存储引擎就是将数据存储在内存中，由于没有磁盘 IO 的等待，速度极快。但是由于是内存存储引擎，所做的任何修改在服务器重启后都将消失（经典用法：用户的在线状态）</li>
</ol>
<h2 id="MySQL-视图"><a href="#MySQL-视图" class="headerlink" title="MySQL 视图"></a>MySQL 视图</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li><p>视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含列，<strong>其数据来自对应的真实表</strong>（基表）</p>
</li>
<li><p>视图和基表的关系</p>
<img src="/2024/02/14/JavaSE/image-20240117224429154.png" class title="image-20240117224429154"></li>
</ol>
<h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><img src="/2024/02/14/JavaSE/image-20240117224523400.png" class title="image-20240117224523400">

<h3 id="视图细节讨论"><a href="#视图细节讨论" class="headerlink" title="视图细节讨论"></a>视图细节讨论</h3><img src="/2024/02/14/JavaSE/image-20240117224810807.png" class title="image-20240117224810807">

<h3 id="视图最佳实践"><a href="#视图最佳实践" class="headerlink" title="视图最佳实践"></a>视图最佳实践</h3><img src="/2024/02/14/JavaSE/image-20240117225050994.png" class title="image-20240117225050994">

<h2 id="MySQL-管理"><a href="#MySQL-管理" class="headerlink" title="MySQL 管理"></a>MySQL 管理</h2><h3 id="MySQL-用户管理"><a href="#MySQL-用户管理" class="headerlink" title="MySQL 用户管理"></a>MySQL 用户管理</h3><p>存储在系统数据库 mysql 中的 user 表中</p>
<img src="/2024/02/14/JavaSE/image-20240117230853174.png" class title="image-20240117230853174">

<ol>
<li>创建用户</li>
<li>删除用户</li>
<li>用户修改密码</li>
</ol>
<h3 id="MySQL-权限管理"><a href="#MySQL-权限管理" class="headerlink" title="MySQL 权限管理"></a>MySQL 权限管理</h3><ol>
<li><p>MySQL 中的权限</p>
<img src="/2024/02/14/JavaSE/image-20240117231020298.png" class title="image-20240117231020298">
</li>
<li><p>用户授权操作</p>
<ol>
<li><p>给用户授权</p>
<img src="/2024/02/14/JavaSE/image-20240117231153850.png" class title="image-20240117231153850">
</li>
<li><p>回收用户授权</p>
<img src="/2024/02/14/JavaSE/image-20240117231426741.png" class title="image-20240117231426741">
</li>
<li><p>权限生效指令</p>
<img src="/2024/02/14/JavaSE/image-20240117231440024.png" class title="image-20240117231440024"></li>
</ol>
</li>
</ol>
<h3 id="细节说明-1"><a href="#细节说明-1" class="headerlink" title="细节说明"></a>细节说明</h3><img src="/2024/02/14/JavaSE/image-20240117231617367.png" class title="image-20240117231617367">

<h1 id="JDBC-连接池"><a href="#JDBC-连接池" class="headerlink" title="JDBC &amp; 连接池"></a>JDBC &amp; 连接池</h1><h2 id="JDBC-概述"><a href="#JDBC-概述" class="headerlink" title="JDBC 概述"></a>JDBC 概述</h2><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li><p>JDBC 为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题</p>
</li>
<li><p>JDBC 基本原理</p>
<img src="/2024/02/14/JavaSE/image-20240117232347472.png" class title="image-20240117232347472">
</li>
<li><p>JDBC 模拟</p>
</li>
</ol>
<h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><p>JDBC API 是一系列接口，它统一和规范了应用程序与数据库的连接、执行 SQL 语句，并得到返回结果等各类操作（相关类与接口在 java.sql 与 javax.sql 包中）</p>
<img src="/2024/02/14/JavaSE/image-20240117232629714.png" class title="image-20240117232629714">

<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>有注入风险</p>
<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><img src="/2024/02/14/JavaSE/image-20240117235711364.png" class title="image-20240117235711364">

<h3 id="ResultSet（结果集）"><a href="#ResultSet（结果集）" class="headerlink" title="ResultSet（结果集）"></a>ResultSet（结果集）</h3><ol>
<li><p>基本介绍</p>
<img src="/2024/02/14/JavaSE/image-20240117233712225.png" class title="image-20240117233712225">
</li>
<li><p>应用实例</p>
<img src="/2024/02/14/JavaSE/image-20240117234420333.png" class title="image-20240117234420333">
</li>
<li><p>底层结构</p>
<img src="/2024/02/14/JavaSE/image-20240117234922311.png" class title="image-20240117234922311"></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="/2024/02/14/JavaSE/image-20240117235944357.png" class title="image-20240117235944357">

<img src="/2024/02/14/JavaSE/image-20240118000102237.png" class title="image-20240118000102237">

<h2 id="JDBCUtils"><a href="#JDBCUtils" class="headerlink" title="JDBCUtils"></a>JDBCUtils</h2><img src="/2024/02/14/JavaSE/image-20240118000517635.png" class title="image-20240118000517635">

<h2 id="JDBC-事务"><a href="#JDBC-事务" class="headerlink" title="JDBC 事务"></a>JDBC 事务</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><img src="/2024/02/14/JavaSE/image-20240118000712435.png" class title="image-20240118000712435">

<h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><img src="/2024/02/14/JavaSE/image-20240118000843587.png" class title="image-20240118000843587">

<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="传统获取-Connection-问题分析"><a href="#传统获取-Connection-问题分析" class="headerlink" title="传统获取 Connection 问题分析"></a>传统获取 Connection 问题分析</h3><img src="/2024/02/14/JavaSE/image-20240118002423048.png" class title="image-20240118002423048">

<h3 id="数据库连接池基本介绍"><a href="#数据库连接池基本介绍" class="headerlink" title="数据库连接池基本介绍"></a>数据库连接池基本介绍</h3><img src="/2024/02/14/JavaSE/image-20240118002519215.png" class title="image-20240118002519215">

<img src="/2024/02/14/JavaSE/image-20240118002738345.png" class title="image-20240118002738345">

<h3 id="数据库连接池种类"><a href="#数据库连接池种类" class="headerlink" title="数据库连接池种类"></a>数据库连接池种类</h3><img src="/2024/02/14/JavaSE/image-20240118002830446.png" class title="image-20240118002830446">

<h2 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache-DBUtils"></a>Apache-DBUtils</h2><img src="/2024/02/14/JavaSE/image-20240118221432092.png" class title="image-20240118221432092">

<h3 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h3><img src="/2024/02/14/JavaSE/image-20240118222716582.png" class title="image-20240118222716582">

<h3 id="DBUtils-类"><a href="#DBUtils-类" class="headerlink" title="DBUtils 类"></a>DBUtils 类</h3><img src="/2024/02/14/JavaSE/image-20240118222754216.png" class title="image-20240118222754216">

<img src="/2024/02/14/JavaSE/image-20240118222821008.png" class title="image-20240118222821008">

<h2 id="DAO-增删改查-BasicDao"><a href="#DAO-增删改查-BasicDao" class="headerlink" title="DAO 增删改查 - BasicDao"></a>DAO 增删改查 - BasicDao</h2><h3 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h3><img src="/2024/02/14/JavaSE/image-20240121142628803.png" class title="image-20240121142628803">

<h3 id="基本说明-1"><a href="#基本说明-1" class="headerlink" title="基本说明"></a>基本说明</h3><img src="/2024/02/14/JavaSE/image-20240121144503721.png" class title="image-20240121144503721">

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li><a href="./java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8(%E5%8F%82%E8%80%83).zip">java正则表达式大全(参考).zip</a></li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><img src="/2024/02/14/JavaSE/image-20240121153238901.png" class title="image-20240121153238901">

<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><img src="/2024/02/14/JavaSE/image-20240121155941696.png" class title="image-20240121155941696">

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>想要灵活运用正则表达式，须了解其中各种元字符的功能，按功能分为</p>
<ol>
<li><p>转义符（\\）</p>
<img src="/2024/02/14/JavaSE/image-20240121161342449.png" class title="image-20240121161342449">
</li>
<li><p>限定符</p>
<p>用于指定其前面的字符和组合项连续出现多少次</p>
<img src="/2024/02/14/JavaSE/image-20240121163213657.png" class title="image-20240121163213657">

<img src="/2024/02/14/JavaSE/image-20240121163339507.png" class title="image-20240121163339507">

<blockquote>
<p>非贪婪匹配：限定符 后加 问号</p>
</blockquote>
</li>
<li><p>选择匹配符</p>
<p>在匹配某个字符串的时候是选择性的（既可以匹配这个，又可以匹配那个）</p>
<img src="/2024/02/14/JavaSE/image-20240121163052801.png" class title="image-20240121163052801">
</li>
<li><p>分组、捕获 与 反向引用符</p>
<p>捕获分组</p>
<img src="/2024/02/14/JavaSE/image-20240121164032425.png" class title="image-20240121164032425">

<p>非捕获分组（不存储于 groups 中）</p>
<img src="/2024/02/14/JavaSE/image-20240121185859085.png" class title="image-20240121185859085">

<p>反向引用</p>
<img src="/2024/02/14/JavaSE/image-20240121192523578.png" class title="image-20240121192523578">
</li>
<li><p>特殊字符</p>
</li>
<li><p>字符匹配符</p>
<img src="/2024/02/14/JavaSE/image-20240121161447211.png" class title="image-20240121161447211">

<img src="/2024/02/14/JavaSE/image-20240121161606490.png" class title="image-20240121161606490">
</li>
<li><p>定位符</p>
<p>规定要匹配的字符串出现的位置（如在字符串的开始还是结束位置）</p>
<img src="/2024/02/14/JavaSE/image-20240121163632799.png" class title="image-20240121163632799"></li>
</ol>
<h2 id="三个常用类"><a href="#三个常用类" class="headerlink" title="三个常用类"></a>三个常用类</h2><p>java.util.regex</p>
<h3 id="Pattern-类"><a href="#Pattern-类" class="headerlink" title="Pattern 类"></a>Pattern 类</h3><img src="/2024/02/14/JavaSE/image-20240121191610135.png" class title="image-20240121191610135">

<blockquote>
<p>Pattern.matches(pattern, content) -&gt; <em>返回是否匹配成功</em></p>
</blockquote>
<h3 id="Matcher-类"><a href="#Matcher-类" class="headerlink" title="Matcher 类"></a>Matcher 类</h3><img src="/2024/02/14/JavaSE/image-20240121191631183.png" class title="image-20240121191631183">

<h3 id="PatternSyntaxException-类"><a href="#PatternSyntaxException-类" class="headerlink" title="PatternSyntaxException 类"></a>PatternSyntaxException 类</h3><img src="/2024/02/14/JavaSE/image-20240121191655741.png" class title="image-20240121191655741">

<h1 id="Java-8-11新特性"><a href="#Java-8-11新特性" class="headerlink" title="Java 8 - 11新特性"></a>Java 8 - 11新特性</h1><h2 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h2><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><img src="/2024/02/14/JavaSE/image-20240124161208088.png" class title="image-20240124161208088">

<img src="/2024/02/14/JavaSE/image-20240124161230674.png" class title="image-20240124161230674">

<img src="/2024/02/14/JavaSE/image-20240124161253191.png" class title="image-20240124161253191">

<img src="/2024/02/14/JavaSE/image-20240124161329491.png" class title="image-20240124161329491">

<p>（函数式接口）</p>
<img src="/2024/02/14/JavaSE/image-20240124161529257.png" class title="image-20240124161529257">

<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><h3 id="接口静态方法"><a href="#接口静态方法" class="headerlink" title="接口静态方法"></a>接口静态方法</h3><h3 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h3><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><img src="/2024/02/14/JavaSE/image-20240124162216738.png" class title="image-20240124162216738">

<h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><h3 id="stream-API"><a href="#stream-API" class="headerlink" title="stream API"></a>stream API</h3><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><h3 id="串行流"><a href="#串行流" class="headerlink" title="串行流"></a>串行流</h3><h3 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    Optional</span><br><span class="line">            .ofNullable(str)   <span class="comment">//将str包装进Optional</span></span><br><span class="line">            .ifPresent(System.out::println);  </span><br><span class="line">  	<span class="comment">//println也是接受一个String参数，返回void，所以这里使用我们前面提到的方法引用的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Optional.ofNullable(str).orElse(&quot;VVV&quot;));   //orElse表示如果为空就返回里面的内容</span><br></pre></td></tr></table></figure>

<h2 id="新时间日期-API"><a href="#新时间日期-API" class="headerlink" title="新时间日期 API"></a>新时间日期 API</h2><hr>
<h1 id="Java-9-17-新特性"><a href="#Java-9-17-新特性" class="headerlink" title="Java 9-17 新特性"></a>Java 9-17 新特性</h1><p>代码层</p>
<ol>
<li>JShell</li>
<li><strong>类型推断</strong></li>
<li><strong>集合增强API</strong></li>
<li>Stream 加强</li>
<li>新增字符串处理方法</li>
<li>Optional 加强</li>
<li>InputStream 增强API</li>
<li>标准Java异步HTTP客户端</li>
</ol>
<p>其他</p>
<ol>
<li>简化编译运行</li>
<li>支持Unicode10</li>
<li>Epsilon 垃圾收集器</li>
<li>ZGC</li>
<li>JFR</li>
<li>支持Linux容器</li>
<li>支持G1上的并行完全垃圾收集</li>
<li>增加加密算法，代替RC4</li>
<li>最新HTTPS安全协议TLS</li>
<li>移除 &amp; 废弃</li>
</ol>
<h2 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h2><ol>
<li><p>模块化开发</p>
<p>类似于 js 导模块（模块之间的引用较为严格）</p>
</li>
<li><p>JShell 交互式命令行</p>
</li>
<li><p>接口中方法可用 private 修饰，之后只可在内部进行调用</p>
</li>
<li><p>集合类新增工厂方法</p>
<img src="/2024/02/14/JavaSE/image-20240126134712108.png" class title="image-20240126134712108">
</li>
<li><p>Stream API 改进</p>
<img src="/2024/02/14/JavaSE/image-20240126135359718.png" class title="image-20240126135359718">

<img src="/2024/02/14/JavaSE/image-20240126135741457.png" class title="image-20240126135741457">
</li>
<li><p>其它新特性</p>
</li>
</ol>
<h2 id="Java-10"><a href="#Java-10" class="headerlink" title="Java 10"></a>Java 10</h2><ol>
<li>var 局部变量类型推断</li>
</ol>
<h2 id="Java-11-LTS"><a href="#Java-11-LTS" class="headerlink" title="Java 11 (LTS)"></a>Java 11 (LTS)</h2><ol>
<li><p>用于 Lambda 的形参局部变量语法</p>
<p>var 关键字在 Lambda 表达式中的使用</p>
</li>
<li><p>String 类的增强方法</p>
</li>
<li><p>全新的 HttpClient</p>
<p>新 API 支持最新 HTTP2 和 WebSocket 协议</p>
</li>
</ol>
<h2 id="Java-12-16"><a href="#Java-12-16" class="headerlink" title="Java 12 - 16"></a>Java 12 - 16</h2><ol>
<li><p>switch 语法糖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">grade</span><span class="params">(<span class="type">int</span> score)</span>&#123;</span><br><span class="line">    score /= <span class="number">10</span>;  <span class="comment">//既然分数段都是整数，那就直接整除10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (score) &#123;   <span class="comment">//增强版switch语法</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>, <span class="number">9</span> -&gt; <span class="string">&quot;优秀&quot;</span>;   <span class="comment">//语法那是相当的简洁，而且也不需要我们自己考虑break或是return来结束switch了（有时候就容易忘记，这样的话就算忘记也没事了）</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>, <span class="number">7</span> -&gt; <span class="string">&quot;良好&quot;</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span> -&gt; <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>yield 关键字使从 switch 返回</p>
</blockquote>
</li>
<li><p>三引号文本块</p>
<p>长段格式文本原样输出</p>
</li>
<li><p>新 instanceof 语法糖</p>
</li>
<li><p>空指针异常改进：提示出错原因</p>
</li>
<li><p>记录类型</p>
</li>
</ol>
<h2 id="Java-17-LTS"><a href="#Java-17-LTS" class="headerlink" title="Java 17 (LTS)"></a>Java 17 (LTS)</h2><ol>
<li>密封类型：限制类的继承</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>计算机科学与技术</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 笔记</title>
    <url>/2024/01/08/Nginx/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Web 中间件</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Web 中间件</tag>
        <tag>负载均衡</tag>
        <tag>反向代理</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理</title>
    <url>/2024/01/04/Music-Theory/</url>
    <content><![CDATA[<h1 id="音阶推算"><a href="#音阶推算" class="headerlink" title="音阶推算"></a>音阶推算</h1><h2 id="十二平均律"><a href="#十二平均律" class="headerlink" title="十二平均律"></a>十二平均律</h2><img src="/2024/01/04/Music-Theory/image-20240114211936310.png" class title="image-20240114211936310">

<h1 id="音程"><a href="#音程" class="headerlink" title="音程"></a>音程</h1><ul>
<li>音与音之间的距离，单位&#x2F;度</li>
</ul>
<h2 id="大三度"><a href="#大三度" class="headerlink" title="大三度"></a>大三度</h2><p>三度之间皆为全音关系</p>
<h2 id="小三度"><a href="#小三度" class="headerlink" title="小三度"></a>小三度</h2><p>三度之间为全半音关系</p>
<h2 id="纯四度"><a href="#纯四度" class="headerlink" title="纯四度"></a>纯四度</h2><p>四度之间含半音</p>
<h2 id="增四度"><a href="#增四度" class="headerlink" title="增四度"></a>增四度</h2><p>纯四度之外（四度之间无半音）</p>
<h1 id="音名-唱名"><a href="#音名-唱名" class="headerlink" title="音名 &amp; 唱名"></a>音名 &amp; 唱名</h1><h2 id="音名"><a href="#音名" class="headerlink" title="音名"></a>音名</h2><p>A B C D E F G</p>
<h2 id="唱名"><a href="#唱名" class="headerlink" title="唱名"></a>唱名</h2><p>Do …</p>
<h1 id="和弦"><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h1><img src="/2024/01/04/Music-Theory/image-20240115122124843.png" class title="image-20240115122124843">

<h2 id="和弦构成"><a href="#和弦构成" class="headerlink" title="和弦构成"></a>和弦构成</h2><h3 id="大三和弦"><a href="#大三和弦" class="headerlink" title="大三和弦"></a>大三和弦</h3><p>大三度 + 小三度</p>
<h3 id="小三和弦（音名后加m，如-Dm）"><a href="#小三和弦（音名后加m，如-Dm）" class="headerlink" title="小三和弦（音名后加m，如 Dm）"></a>小三和弦（音名后加m，如 Dm）</h3><p>小三度 + 大三度</p>
<img src="/2024/01/04/Music-Theory/image-20240115154436648.png" class title="image-20240115154436648">

<h2 id="和弦级数"><a href="#和弦级数" class="headerlink" title="和弦级数"></a>和弦级数</h2><img src="/2024/01/04/Music-Theory/image-20240117110605931.png" class title="image-20240117110605931">

]]></content>
      <categories>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>吉他</tag>
        <tag>乐理</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 笔记</title>
    <url>/2024/01/08/MyBatis/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>数据持久化</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统笔记</title>
    <url>/2023/11/07/OS-Notes/</url>
    <content><![CDATA[<h1 id="8086基础阶段总结"><a href="#8086基础阶段总结" class="headerlink" title="8086基础阶段总结"></a>8086基础阶段总结</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><h2 id="内存访问-字节序"><a href="#内存访问-字节序" class="headerlink" title="内存访问&amp;字节序"></a>内存访问&amp;字节序</h2><h2 id="段地址-偏移地址"><a href="#段地址-偏移地址" class="headerlink" title="段地址&amp;偏移地址"></a>段地址&amp;偏移地址</h2><h2 id="虚拟硬盘の写入-虚拟机-Bochs"><a href="#虚拟硬盘の写入-虚拟机-Bochs" class="headerlink" title="虚拟硬盘の写入&amp;虚拟机(Bochs)"></a>虚拟硬盘の写入&amp;虚拟机(Bochs)</h2><h3 id="虚拟硬盘"><a href="#虚拟硬盘" class="headerlink" title="虚拟硬盘"></a>虚拟硬盘</h3><ol>
<li>写入数据工具：WinHex</li>
<li>一切从<strong>主引导扇区</strong>开始</li>
</ol>
<h3 id="Bochs虚拟机"><a href="#Bochs虚拟机" class="headerlink" title="Bochs虚拟机"></a>Bochs虚拟机</h3><p>可调试操作系统の虚拟机</p>
<h2 id="显卡-显存"><a href="#显卡-显存" class="headerlink" title="显卡&amp;显存"></a>显卡&amp;显存</h2><h3 id="屏幕显示文本"><a href="#屏幕显示文本" class="headerlink" title="屏幕显示文本"></a>屏幕显示文本</h3><ol>
<li><p>一字节字符编码信息 + 一字节显示属性信息</p>
</li>
<li><p><strong>MOV</strong></p>
<p>mov 目的操作数，源操作数</p>
</li>
<li><p>汇编程序の<strong>标号</strong></p>
<p>代表距离最近的汇编指令の汇编地址</p>
</li>
<li><p><strong>JMP</strong> -&gt; <em>段间绝对跳转指令</em></p>
<p>jmp 段地址:偏移地址</p>
</li>
<li><p>虚拟机添加硬盘运行写屏程序</p>
</li>
<li><p><strong>主引导扇区</strong>布局</p>
<p>0x07C00 - 0x07E00</p>
</li>
<li><p>使用标号计算偏移地址</p>
<p>直接 对标号做加减操作 进行跳转</p>
</li>
<li><p>寄存器 绝对 间接 近跳转 -&gt; <em>jmp bx</em></p>
<ol>
<li><p>近跳转：段内跳转</p>
</li>
<li><p>间接    ：跳转地址由寄存器间接给出</p>
</li>
<li><p>绝对    ：给出的地址是实际地址</p>
</li>
</ol>
</li>
<li><p>使用相对偏移量の短跳转&amp;近跳转(可省参数)</p>
<ol>
<li>短跳转：jmp (short) 标号  -编译-&gt;  EB <strong>8位の相对偏移量</strong></li>
<li>近跳转：jmp (near) 标号   -编译-&gt;  E9 <strong>16位の相对偏移量</strong></li>
</ol>
</li>
</ol>
<h3 id="屏幕显示数字"><a href="#屏幕显示数字" class="headerlink" title="屏幕显示数字"></a>屏幕显示数字</h3><ol>
<li>无符号数除法 指令</li>
<li><strong>XOR</strong> -&gt; <em>异或指令</em></li>
<li><strong>ADD</strong> -&gt; <em>加法指令</em></li>
<li>段超越前缀 -&gt; <em>跨段访问内存时，使用另一个段地址寄存器作前缀用：连接</em></li>
</ol>
<h2 id="循环、批量传送-和-条件转移"><a href="#循环、批量传送-和-条件转移" class="headerlink" title="循环、批量传送 和 条件转移"></a>循环、批量传送 和 条件转移</h2><ol>
<li><p>NASM 的 $ 和 $$ 指令</p>
<p><strong>$</strong> -&gt; <em>当前代码的汇编地址</em></p>
<p><strong>$$</strong> -&gt; <em>代码首部的起始汇编地址</em></p>
</li>
<li><p>跳过 非指令の数据区</p>
<ol>
<li>指令：db、dw等定义数据区</li>
<li>在起始处用jmp跳至指令区</li>
</ol>
</li>
<li><p>串传送</p>
<ol>
<li><p>使用前准备工作：</p>
<p>DS:SI		原始数据串地址：偏移地址</p>
<p>ES:DI		目标位置段地址：偏移地址</p>
</li>
<li><p>指令(REP指令依cx计数)：</p>
<ol>
<li><strong>(REP) MOVSB</strong> -&gt; <em>（重复） 按字节传送(一次)</em></li>
<li><strong>(REP) MOVSW</strong> -&gt; <em>（重复）按字传送(一次)</em></li>
<li><strong>CLD</strong> -&gt; <em>方向标志清零，使之指示正方向(低地址-&gt;高地址)</em></li>
<li><strong>STD</strong> -&gt; <em>置方向标志为1，指示反方向</em></li>
</ol>
</li>
<li><p>标志寄存器FLAGS中：</p>
<ol>
<li>方向标志(DF)：指示串传送流方向</li>
<li>零	标志(ZF)：指示最近一次计算所得是(1)否(0)为零</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>LOOP</strong>指令</p>
<ol>
<li><p>用法：loop 标号(地址)</p>
</li>
<li><p>循环次数：cx寄存器中所存数值</p>
</li>
<li><p>机器码：E2 8位相对偏移量</p>
</li>
<li><p>执行过程：</p>
<ol>
<li>将cx内容减一</li>
<li>若cx内容 不为零，转移执行，否则顺序往后执行</li>
</ol>
</li>
</ol>
</li>
<li><p>基址寻址&amp; INC指令</p>
<p><strong>INC</strong> -&gt; <em>自增(可用于 基址偏移地址寻址 使基地址循环自增)</em></p>
<p>​	inc r&#x2F;m(m需指定占用字节大小)</p>
<p>8086中，只能使用BX、SI、DI、BP寄存器来提供偏移地址(如mov [bx], dl)</p>
<blockquote>
<p>寄存器BX在设计之初的作用之一就是用来提供数据访问的基地址，所以又叫<strong>基址寄存器(Base Address Register)</strong>*</p>
</blockquote>
<blockquote>
<p>在设计8086处理器时，每个寄存器都有自己的特殊用途，比如<strong>AX</strong>是<strong>累加器(Accumulator)<strong>，与它有关的指令还会做指令长度上的优化(较短)；</strong>CX</strong>是<strong>计数器(Counter)<strong>；</strong>DX</strong>是<strong>数据寄存器(Data)<strong>，除了作为通用寄存器外，还专门用于和外设之间进行数据传送；</strong>SI</strong>是<strong>源索引寄存器(Source Index)<strong>；</strong>DI</strong>是**目标索引寄存器(Destination Index)**，用于数据传送操作，我们已经在movsb和movsw指令用法中领略过了</p>
</blockquote>
</li>
<li><p>DEC指令</p>
<p><strong>DEC</strong> -&gt; <em>自减</em></p>
<p>​	dec (r&#x2F;m)</p>
</li>
<li><p>基址变址寻扯&amp;条件转移指令</p>
<ol>
<li><p>8086中基址变址允许的组合：</p>
<p>bx + si</p>
<p>bx + di</p>
<p>bp + si</p>
<p>bp + di</p>
</li>
<li><p>条件转移指令：</p>
<ol>
<li><strong>JNS</strong> -&gt; <em>符号标志(SF)为0时跳转</em></li>
</ol>
</li>
<li><p>标志寄存器FLAGS中：</p>
<ol>
<li>符号标志(SF)：计算结果最高位为0则为0，反之为1</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="计算机中的负数"><a href="#计算机中的负数" class="headerlink" title="计算机中的负数"></a>计算机中的负数</h2><ol>
<li><p>减法指令&amp;求补指令(SUB&amp;NEG)</p>
<ol>
<li><p><strong>SUB</strong> -&gt; <em>减法指令</em></p>
<p>​	sub r&#x2F;m, r&#x2F;m&#x2F;imm(立即数)</p>
<p>​	注意：两操作数宽度需一致，且不能同为内存地址(m)</p>
</li>
<li><p><strong>NEG</strong> -&gt; <em>求负or求补</em></p>
<p>​	neg r&#x2F;m -&gt; 执行 <strong>0-操作数</strong> 操作 得到补码(负数)，执行后替换操作数中的内容</p>
</li>
</ol>
</li>
<li><p>对于 有(无)符号数 の区分</p>
<blockquote>
<p>可以说，大多数指令既适用于无符号整数，也适用于有符号整数。指令执行的结果不管是用无符号整数来解释，还是用有符号整数来解释，都是正确的</p>
</blockquote>
<blockquote>
<p>但是，也有一些指令不能同时应付无符号数和有符号数，需要根据你的实际情况选择它们的无符号版本和有符号版本。比如，无符号数乘法指令mul和有符号数乘法指令imul，以及无符号数除法指令div和有符号数除法指令idiv</p>
</blockquote>
<blockquote>
<p>简单总结，有些指令皆适用，有些指令要区分使用</p>
</blockquote>
</li>
<li><p>有符号数の除法指令IDIV</p>
<p>​	idiv r&#x2F;m</p>
<ol>
<li><p>商和余数的符号性</p>
<p>如果 被除数 和 除数 的<strong>符号不同</strong>，<strong>商</strong>为负数</p>
<p><strong>余数</strong>的符号 始终 和被除数相同</p>
</li>
</ol>
</li>
<li><p>有符号数の符号扩展指令</p>
</li>
</ol>
<h2 id="栈-逻辑指令"><a href="#栈-逻辑指令" class="headerlink" title="栈&amp;逻辑指令"></a>栈&amp;逻辑指令</h2><ol>
<li><p>栈</p>
<ol>
<li><p>cs -&gt; <em>指定代码段识别区</em></p>
</li>
<li><p>ds&#x2F;es -&gt; <em>指定数据段识别区</em></p>
</li>
<li><p>ss:sp -&gt; <em>指定<strong>栈段识别区</strong></em></p>
</li>
<li><p><strong>栈の使用</strong>：(必须保持栈平衡，有压必有出)</p>
<ol>
<li><p><strong>PUSH</strong> -&gt; <em>入栈</em></p>
<p>​	push r&#x2F;m</p>
<blockquote>
<p>push dx</p>
<p>push word [0x2002]</p>
</blockquote>
<p>​	push 执行过程：</p>
<ol>
<li>sp &#x3D; sp - 操作数大小(字节);</li>
<li>利用ss:sp生成物理地址;</li>
<li>将操作数写入上述地址处</li>
</ol>
</li>
<li><p><strong>POP</strong> -&gt; <em>出栈</em></p>
<p>​	pop r&#x2F;m</p>
<blockquote>
<p>pop ax</p>
<p>pop word [0x08]</p>
</blockquote>
<p>​	pop 执行过程：</p>
<ol>
<li>利用ss:sp生成物理地址;</li>
<li>从上述地址处取得数据，存入由操作数提供的目标位置处;</li>
<li>sp &#x3D; sp + 2;</li>
</ol>
</li>
<li><p>注意：</p>
<ol>
<li>必须保持栈平衡，有压必有出</li>
<li>充分估计需要的栈空间，开辟安全的空间</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>逻辑指令</p>
<ol>
<li><p><strong>OR</strong> -&gt; <em>逻辑或</em></p>
<p>​	or r&#x2F;m, r&#x2F;m&#x2F;imm(左右操作数长度需一致)</p>
</li>
<li><p><strong>AND</strong> -&gt; <em>逻辑与</em></p>
<p>​	and r&#x2F;m, r&#x2F;m&#x2F;imm(长度需一致)</p>
</li>
</ol>
</li>
</ol>
<h2 id="Intel8086处理器の寻址方式"><a href="#Intel8086处理器の寻址方式" class="headerlink" title="Intel8086处理器の寻址方式"></a>Intel8086处理器の寻址方式</h2><ol>
<li>寄存器&#x2F;立即数寻址&#x2F;直接寻址</li>
<li>基址寻址</li>
<li>变址寻址</li>
<li>基址变址寻址</li>
</ol>
<h2 id="硬盘-显卡の访问与控制"><a href="#硬盘-显卡の访问与控制" class="headerlink" title="硬盘&amp;显卡の访问与控制"></a>硬盘&amp;显卡の访问与控制</h2><ol>
<li><p><strong>align</strong> -&gt; <em>设置段对齐长度</em></p>
<blockquote>
<p>section s	align&#x3D;16</p>
</blockquote>
</li>
<li><p><strong>vstart</strong> -&gt; <em>设置段内相对起始汇编地址</em></p>
<blockquote>
<p>section s	align&#x3D;16	vstart&#x3D;0x100</p>
</blockquote>
</li>
<li><p>加载器 &amp; 用户程序</p>
<img src="/2023/11/07/OS-Notes/image-20231111103004990.png" alt="image-20231111103004990" style="zoom:80%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;=================================================</span><br><span class="line">section header vstart=0</span><br><span class="line">	; 程序总长度</span><br><span class="line">	program_lenth	dd	program_end</span><br><span class="line">	; 用户程序入口点</span><br><span class="line">	code_entry		dw	start</span><br><span class="line">					dd	section.code.start</span><br><span class="line">	; 段重定位表项个数		</span><br><span class="line">	realloc_tbl_len	dw	(segtbl_end-segtbl_begin)/4</span><br><span class="line">	; 段重定位表</span><br><span class="line">	segtbl_begin:</span><br><span class="line">	code_segment	dd	section.code.start</span><br><span class="line">	data_segment	dd	section.data.start</span><br><span class="line">	stack_segment	dd	section.stack.start</span><br><span class="line">	segtbl_end:</span><br><span class="line">;=================================================</span><br><span class="line">section code align=16 vstart=0</span><br><span class="line">	start:</span><br></pre></td></tr></table></figure>

<p><strong>section.段名字.start</strong> -&gt; <em>计算段汇编地址</em></p>
<img src="/2023/11/07/OS-Notes/image-20231111103908690.png" alt="image-20231111103908690" style="zoom: 50%;">
</li>
<li><p>加载器的工作流程 &amp; 常数的声明方法</p>
<ol>
<li><p>加载器工作流程</p>
<ol>
<li>读取用户程序的起始扇区</li>
<li>把整个用户程序都读入内存</li>
<li>计算段的物理地址和逻辑段地址（段的重定位）</li>
<li>转移到用户程序执行（将处理器的控制权交给用户程序）</li>
</ol>
</li>
<li><p><strong>声明常量</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app_lba_start equ(als) 100	; 相当于#define，常数的声明不占用汇编地址</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>外围设备及其接口</p>
</li>
</ol>
<h2 id="中断-动态时钟显示"><a href="#中断-动态时钟显示" class="headerlink" title="中断&amp;动态时钟显示"></a>中断&amp;动态时钟显示</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ol>
<li><p>外部硬件中断</p>
<img src="/2023/11/07/OS-Notes/image-20240227180916141.png" class title="image-20240227180916141">

<p>后经中断屏蔽寄存器</p>
<img src="/2023/11/07/OS-Notes/image-20240227180946481.png" class title="image-20240227180946481">

<p>标志寄存器可选是否忽略中断</p>
<img src="/2023/11/07/OS-Notes/image-20240227181029879.png" class title="image-20240227181029879">

<p>1 -&gt; 接受&amp;响应中断，0 -&gt; 屏蔽信号</p>
<img src="/2023/11/07/OS-Notes/image-20240227181219914.png" class title="image-20240227181219914">
</li>
<li><p>实模式下的中断向量表（由 BIOS 在开机时创建供 CPU 使用）</p>
<img src="/2023/11/07/OS-Notes/image-20240227185652674.png" class title="image-20240227185652674">

<blockquote>
<p>中断号 x 4 &#x3D; 物理地址（段地址 + 偏移地址）</p>
</blockquote>
</li>
<li><p>遇到中断时操作</p>
<ol>
<li>保护断点现场（将标志寄存器、指令指针寄存器等压栈）</li>
<li>执行中断处理程序（取得地址、执行）</li>
<li>遇到 iret（中断返回）指令，返回断点，将前状态出栈，继续执行</li>
</ol>
</li>
</ol>
<h1 id="32位x86处理器架构"><a href="#32位x86处理器架构" class="headerlink" title="32位x86处理器架构"></a>32位x86处理器架构</h1><h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2>]]></content>
      <categories>
        <category>计算机科学与技术</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>操作系统</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 笔记</title>
    <url>/2024/01/08/Redis/</url>
    <content><![CDATA[<h1 id="笔记内容见-Java-项目-6-黑马点评"><a href="#笔记内容见-Java-项目-6-黑马点评" class="headerlink" title="笔记内容见 Java 项目 - 6. 黑马点评"></a>笔记内容见 Java 项目 - 6. 黑马点评</h1>]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
        <tag>基于内存</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM</title>
    <url>/2024/01/08/SSM/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Spring 系框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>SSM</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 笔记</title>
    <url>/2024/01/08/Spring/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV1Kv4y1x7is">Spring 核心教程 已完结（IDEA 2023最新版）4K蓝光画质 基于Spring6的全新重制版本 起立到起飞</a></p>
<h1 id="笔记引用"><a href="#笔记引用" class="headerlink" title="笔记引用"></a>笔记引用</h1><p><a href="https://www.itbaima.cn/document">柏码 - 让每一行代码都闪耀智慧的光芒！ (itbaima.cn)</a></p>
<h1 id="Spring-IoC-容器"><a href="#Spring-IoC-容器" class="headerlink" title="Spring IoC 容器"></a>Spring IoC 容器</h1><h2 id="重要结构图"><a href="#重要结构图" class="headerlink" title="重要结构图"></a>重要结构图</h2><img src="/2024/01/08/Spring/image-20240215003802263.png" class title="image-20240215003802263">

<img src="/2024/01/08/Spring/image-20240215003747520.png" class title="image-20240215003747520">

<h1 id="Spring-Bean-管理"><a href="#Spring-Bean-管理" class="headerlink" title="Spring Bean 管理"></a>Spring Bean 管理</h1><h2 id="Bean-管理"><a href="#Bean-管理" class="headerlink" title="Bean 管理"></a>Bean 管理</h2><h3 id="创建-Bean-对象"><a href="#创建-Bean-对象" class="headerlink" title="创建 Bean 对象"></a>创建 Bean 对象</h3><h3 id="向-Bean-注入属性"><a href="#向-Bean-注入属性" class="headerlink" title="向 Bean 注入属性"></a>向 Bean 注入属性</h3><h2 id="Bean-配置"><a href="#Bean-配置" class="headerlink" title="Bean 配置"></a>Bean 配置</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2>]]></content>
      <categories>
        <category>Spring 系框架</category>
      </categories>
      <tags>
        <tag>计算机科学与技术</tag>
        <tag>Spring</tag>
        <tag>Spring6</tag>
        <tag>框架</tag>
        <tag>Web后端</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 笔记</title>
    <url>/2024/01/08/SpringBoot/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Spring 系框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 笔记</title>
    <url>/2024/01/08/SpringMVC/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Spring 系框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>Spring Web MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>随想录</title>
    <url>/2023/11/07/Tips/</url>
    <content><![CDATA[<h1 id="1-16-摘录"><a href="#1-16-摘录" class="headerlink" title="1.16 - 摘录"></a>1.16 - 摘录</h1><p>“时间过得真快啊。”<br>“有多快？”<br>“像烟花一样，一瞬间。”<br>“烟花易逝，人情长存。”</p>
<hr>
<ul>
<li>2023</li>
</ul>
<h1 id="12-12-今日歌曲推荐"><a href="#12-12-今日歌曲推荐" class="headerlink" title="12.12 - 今日歌曲推荐"></a>12.12 - 今日歌曲推荐</h1><img src="/2023/11/07/Tips/509ff6e6c7d8aacad75e9b447f55781.jpg" class title="509ff6e6c7d8aacad75e9b447f55781">

<h1 id="11-30-今日歌曲推荐"><a href="#11-30-今日歌曲推荐" class="headerlink" title="11.30 - 今日歌曲推荐"></a>11.30 - 今日歌曲推荐</h1><img src="/2023/11/07/Tips/7573761623a261b45dec2d2a04eafe5.jpg" class title="7573761623a261b45dec2d2a04eafe5">

<h1 id="11-25-今日歌曲推荐"><a href="#11-25-今日歌曲推荐" class="headerlink" title="11.25 - 今日歌曲推荐"></a>11.25 - 今日歌曲推荐</h1><img src="/2023/11/07/Tips/%E6%9C%80%E5%90%8E%E7%9A%84%E9%81%93%E5%88%AB.jpg" class title="最后的道别">

<h1 id="11-24-今日歌曲推荐"><a href="#11-24-今日歌曲推荐" class="headerlink" title="11.24 - 今日歌曲推荐"></a>11.24 - 今日歌曲推荐</h1><img src="/2023/11/07/Tips/说爱你.jpg" alt="说爱你">

<h1 id="11-22-随想"><a href="#11-22-随想" class="headerlink" title="11.22 - 随想"></a>11.22 - 随想</h1><p>看遍人海潮落潮起</p>
<p>尝尽世间人聚人离</p>
<p><strong>希望下一次，不再是不辞而别</strong></p>
<h1 id="11-11-关于热爱"><a href="#11-11-关于热爱" class="headerlink" title="11.11 - 关于热爱"></a>11.11 - 关于热爱</h1><p>最初<br>我喜欢音乐，喜欢计算机<br>不是为做好音乐，玩转计算机<br>而是音乐和计算机让我知道<br>什么是真正的<br>念念不忘，必有回响</p>
<h1 id="11-9-今日歌曲推荐"><a href="#11-9-今日歌曲推荐" class="headerlink" title="11.9 - 今日歌曲推荐"></a>11.9 - 今日歌曲推荐</h1><p>Oh they say people come<br>看遍人海潮落潮起<br>Say people go<br>尝尽世间人聚人离<br>……<br>来自Coldplay的单曲《<a href="https://t1.kugou.com/3knbbf0BhV2">Everglow</a>》（@酷狗概念版）</p>
<h1 id="11-7-桃河"><a href="#11-7-桃河" class="headerlink" title="11.7 - 桃河"></a>11.7 - 桃河</h1><img src="/2023/11/07/Tips/11.7.1.jpg" alt="11.7.1">

<img src="/2023/11/07/Tips/11.7.2.jpg" alt="11.7.2">

<img src="/2023/11/07/Tips/11.7.3.jpg" alt="11.7.3">

<img src="/2023/11/07/Tips/11.7.4.jpg" alt="11.7.4">

<img src="/2023/11/07/Tips/11.7.5.jpg" alt="11.7.5">

<img src="/2023/11/07/Tips/11.7.6.jpg" alt="11.7.6">

<p>怀念那个桃河边弹吉他的晚上</p>
]]></content>
      <categories>
        <category>随想录</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>音乐分享</tag>
        <tag>人生思考</tag>
      </tags>
  </entry>
  <entry>
    <title>工具库</title>
    <url>/2023/11/16/Utils/</url>
    <content><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ol>
<li><a href="./utils.py.zip">utils.py.zip</a> -&gt; <em>ChromeWebdriverAntiCrawlSettingsFile</em></li>
</ol>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol>
<li><a href="./Utility.java.zip">Utility.java.zip</a> -&gt; <em>UserInputHandler</em></li>
</ol>
]]></content>
      <categories>
        <category>工具代码切片</category>
      </categories>
      <tags>
        <tag>编程工具类</tag>
        <tag>代码模板</tag>
      </tags>
  </entry>
  <entry>
    <title>“趣”学架构 系列笔记</title>
    <url>/2024/02/12/Web-Architecture/</url>
    <content><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://www.bilibili.com/video/BV1Sx4y117bU">【学架构也可以很有趣】【“趣”学架构】</a></p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1>]]></content>
      <categories>
        <category>工程架构思想与设计</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>架构</tag>
        <tag>工程架构</tag>
        <tag>工程设计</tag>
        <tag>架构师</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全</title>
    <url>/2024/02/07/Web-Security/</url>
    <content><![CDATA[<h1 id="必备网站"><a href="#必备网站" class="headerlink" title="必备网站"></a>必备网站</h1><ul>
<li><a href="https://attack.mitre.org/">ATT&amp;CK（安全术语知识库）</a></li>
<li><a href="https://forum.ywhack.com/bountytips.php">棱角社区（网安工具汇总）</a></li>
<li><a href="https://www.cmd5.org/">CMD5（加密解密站）</a></li>
<li><a href="http://www.hiencode.com/">CTF 常用编码工具站</a></li>
<li><a href="https://paper.seebug.org/">SeeBug（Paper - 安全技术精粹）</a></li>
<li><a href="https://www.freebuf.com/articles/web/290855.html">Web 渗透测试学习成长路线图</a></li>
</ul>
<h1 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h1><ul>
<li><a href="./%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.xmind">课程 Xmind 文件下载</a></li>
</ul>
<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><img src="/2024/02/07/Web-Security/image-20240207150333543.png" class title="image-20240207150333543">

<img src="/2024/02/07/Web-Security/image-20240208192651712.png" class title="image-20240208192651712">

<img src="/2024/02/07/Web-Security/image-20240208192715799.png" class title="image-20240208192715799">

<img src="/2024/02/07/Web-Security/image-20240210093953240.png" class title="image-20240210093953240">

<img src="/2024/02/07/Web-Security/image-20240210094010211.png" class title="image-20240210094010211">

<h1 id="信息打点"><a href="#信息打点" class="headerlink" title="信息打点"></a>信息打点</h1><img src="/2024/02/07/Web-Security/image-20240211230053445.png" class title="image-20240211230053445">

<img src="/2024/02/07/Web-Security/image-20240211230109077.png" class title="image-20240211230109077">

<img src="/2024/02/07/Web-Security/image-20240211230122442.png" class title="image-20240211230122442">

<p><img src="/image-20240215175317545.png" alt="image-20240215175317545"></p>
<h1 id="PHP-开发"><a href="#PHP-开发" class="headerlink" title="PHP 开发"></a>PHP 开发</h1>]]></content>
      <categories>
        <category>计算机安全</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Web</tag>
        <tag>网络</tag>
        <tag>信息安全</tag>
        <tag>红蓝对抗</tag>
      </tags>
  </entry>
</search>
